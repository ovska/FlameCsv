<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#
    // Max supported generics
    const int TotalCount = 16;
    var indexes = Enumerable.Range(0, TotalCount).ToArray();
    var genericTypes = indexes.Select(i => $"T{i}").ToArray();
    var methodName = "ReadRecordsAsync";
#>
#if false
// <auto-generated />
#nullable enable
using System.Diagnostics.CodeAnalysis;
using System.IO.Pipelines;
using FlameCsv.Enumeration;
using FlameCsv.Extensions;
using FlameCsv.Reading;
using FlameCsv.Runtime;
using FlameCsv.Utilities;

namespace FlameCsv;

public static partial class CsvReader
{
    public sealed class CsvRecordFactoryAsyncEnumerable<T, TValue> : IAsyncEnumerable<TValue>
        where T : unmanaged, IBinaryInteger<T>
    {
        private readonly CsvOptions<T> _options;
        private readonly ICsvPipeReader<T> _reader;
        private readonly IMaterializer<T, TValue> _materializer;

        internal CsvRecordFactoryAsyncEnumerable(CsvOptions<T> options, ICsvPipeReader<T> reader, IMaterializer<T, TValue> materializer)
        {
            _options = options;
            _reader = reader;
            _materializer = materializer;
        }

        public CsvValueAsyncEnumerator<T, TValue> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new CsvValueAsyncEnumerator<T, TValue>(
                _options,
                _materializer,
                _reader,
                cancellationToken);
        }

        IAsyncEnumerator<TValue> IAsyncEnumerable<TValue>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }
    }

    [System.Diagnostics.StackTraceHidden]
    private static void ValidateReadRecordsArgs<T>(
        [NotNull] object? reader,
        [NotNull] CsvOptions<T>? options,
        [NotNull] Delegate? recordFactory,
        ref ValueListBuilder<string> list)
        where T : unmanaged, IBinaryInteger<T>
    {
        ArgumentNullException.ThrowIfNull(reader);
        ArgumentNullException.ThrowIfNull(options);
        ArgumentNullException.ThrowIfNull(recordFactory);

        options.MakeReadOnly();

        var parameters = recordFactory.Method.GetParameters();
        for (int i = 0; i < parameters.Length; i++)
        {
            var parameter = parameters[i];
            list.Append(parameter.Name ?? $"arg{i}");
        }
    }

<#
for (var _tokenType = 0; _tokenType < 2; _tokenType++)
{
    string tokenType = _tokenType == 0 ? "char" : "byte";
    string parameterReaderType = _tokenType == 0 ? "TextReader" : "PipeReader";
    string readerType = _tokenType == 0 ? "TextPipeReader" : "CsvBytePipeReader";
#>
<#
    for (var current = 1; current <= TotalCount; current++)
    {
        var generics = string.Join(", ", genericTypes.Take(current)) + ", TValue";
#>
    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and converters</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have <#= current #> field<# if (current != 1) Write("s"); #>.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<<#= tokenType #>, TValue> <#= methodName #><<#= generics #>>(
        <#= parameterReaderType #> reader,
        CsvOptions<<#= tokenType #>> options,
        Func<<#= generics #>> recordFactory)
    {
        StringScratch scratch = default;
        var list = new ValueListBuilder<string>(scratch!);
        ValidateReadRecordsArgs(reader, options, recordFactory, ref list);
        ReadOnlySpan<string> names = list.AsSpan();

        Materializer<<#= tokenType #>, <#= generics #>> materializer = new(recordFactory<#
            for (int i = 0; i < current; i++)
            {
                Write(", options.GetConverter<");
                Write(genericTypes[i]);
                Write(">()");
            }

            for (int i = 0; i < current; i++)
            {
                Write(", names[");
                Write(i.ToString());
                Write("]");
            }
        #>);

        list.Dispose();

        return new CsvRecordFactoryAsyncEnumerable<<#= tokenType #>, TValue>(
            options,
<# if (tokenType == "char") { #>
            new <#= readerType #>(reader, DefaultBufferSize, options._memoryPool),
<# } else { #>
            new PipeReaderWrapper(reader),
<# } #>
            materializer);
    }

<#
}
}
#>
}
#endif

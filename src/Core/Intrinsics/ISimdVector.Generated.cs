// <auto-generated />
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.Arm;
using System.Runtime.Intrinsics.Wasm;
using System.Runtime.Intrinsics.X86;
using System.Text;

#pragma warning disable CS0649 // Field is never assigned to, and will always have its default value

namespace FlameCsv.Intrinsics;

/// <summary>Generic type wrapping a byte vector.</summary>
[System.CodeDom.Compiler.GeneratedCode(Messages.T4Template, null)]
internal interface ISimdVector<T, TVector>
    where T : unmanaged, IBinaryInteger<T>
    where TVector : struct, ISimdVector<T, TVector>
{
    /// <summary>
    /// Returns <c>true</c> if the vector type is hardware accelerated (on release configuration).
    /// </summary>
    static abstract bool IsSupported { get; }

    /// <summary>
    /// Returns the number of bytes in the vector.
    /// </summary>
    static abstract int Count { get; }

    /// <summary>
    /// Returns a vector with all elements set to zero.
    /// </summary>
    static abstract TVector Zero { get; }

    /// <summary>
    /// Returns an equality vector of the two input vectors.
    /// </summary>
    static abstract TVector Equals(TVector left, TVector right);

    /// <summary>
    /// Creates a vector with all elements set to the specified value.
    /// </summary>
    static abstract TVector Create(T value);
    
    /// <summary>
    /// Creates a vector with all elements set to the specified value.
    /// </summary>
    static abstract TVector Create([ConstantExpected(Min = (byte)'\n', Max = (byte)'\r')] byte value);

    /// <summary>
    /// Loads a vector from the specified address.
    /// </summary>
    static abstract TVector LoadUnaligned(ref readonly T source, nuint offset);

    /// <summary>
    /// Returns a bitwise OR of the two input vectors.
    /// </summary>
    static abstract TVector operator |(TVector left, TVector right);

    /// <summary>
    /// Returns <c>true</c> if the two vectors are equal; otherwise, <c>false</c>.
    /// </summary>
    static abstract bool operator ==(TVector left, TVector right);

    /// <summary>
    /// Returns <c>true</c> if the two vectors are not equal; otherwise, <c>false</c>.
    /// </summary>
    static abstract bool operator !=(TVector left, TVector right);

    /// <summary>
    /// Creates a bitmask of the vector.
    /// </summary>
    [JetBrains.Annotations.Pure] nuint ExtractMostSignificantBits();

    /// <summary>
    /// Returns the bytes of the vector allocated to a new array.
    /// </summary>
    [JetBrains.Annotations.Pure] byte[] ToArray();
}


[SkipLocalsInit]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode(Messages.T4Template, null)]
internal readonly struct Vec128<T> : ISimdVector<T, Vec128<T>> where T : unmanaged, IBinaryInteger<T>
{
    private readonly Vector128<byte> _value;

    public static bool IsSupported
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get => (typeof(T) == typeof(byte) || typeof(T) == typeof(char)) && Vector128.IsHardwareAccelerated;
    }

    public static int Count
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get => Vector128<byte>.Count;
    }

    public static Vec128<T> Zero
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get => Vector128<byte>.Zero;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec128<T> Equals(Vec128<T> left, Vec128<T> right) => Vector128.Equals(left._value, right._value);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec128<T> Create(T value)
    {
        Debug.Assert(value < T.CreateTruncating(128));
        return Unsafe.SizeOf<T>() switch
        {
            sizeof(byte) => Vector128.Create(Unsafe.BitCast<T, byte>(value)),
            sizeof(char) => Vector128.Create(unchecked((byte)Unsafe.BitCast<T, char>(value))),
            _ => throw new NotSupportedException(),
        };
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec128<T> Create([ConstantExpected] byte value)
    {
        Debug.Assert(value < 128);
        return Vector128.Create(value);
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec128<T> LoadUnaligned(ref readonly T source, nuint offset)
    {
        if (typeof(T) == typeof(byte))
        {
            return Vector128.LoadUnsafe(ref Unsafe.As<T, byte>(ref Unsafe.AsRef(in source)), offset);
        }

        if (typeof(T) != typeof(char))
        {
            throw new NotSupportedException();
        }

        if (Avx512BW.VL.IsSupported)
        {
            var v = Vector256.LoadUnsafe(ref Unsafe.As<T, ushort>(ref Unsafe.AsRef(in source)), offset);
            return Avx512BW.VL.ConvertToVector128ByteWithSaturation(v);
        }

        var v0 = Vector128.LoadUnsafe(ref Unsafe.As<T, ushort>(ref Unsafe.AsRef(in source)), offset);
        var v1 = Vector128.LoadUnsafe(ref Unsafe.As<T, ushort>(ref Unsafe.AsRef(in source)), offset + ((nuint)Vector128<byte>.Count / sizeof(ushort)));

        // prefer architecture specific intrinsic as they don't perform additional AND like Vector128.Narrow does
        if (Sse2.IsSupported)
        {
            return Sse2.PackUnsignedSaturate(v0.AsInt16(), v1.AsInt16());
        }
        else if (AdvSimd.IsSupported)
        {
            var lower = AdvSimd.ExtractNarrowingSaturateUnsignedLower(v0.AsInt16());
            var upper = AdvSimd.ExtractNarrowingSaturateUnsignedLower(v1.AsInt16());
            return Vector128.Create(lower, upper);
        }
        else if (PackedSimd.IsSupported)
        {
            return PackedSimd.ConvertNarrowingSaturateUnsigned(v0.AsInt16(), v1.AsInt16());
        }
        else
        {
            var lower = Vector128.Min(v0, Vector128.Create((ushort)127));
            var upper = Vector128.Min(v1, Vector128.Create((ushort)127));
            return Vector128.Narrow(lower, upper);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public nuint ExtractMostSignificantBits() => (nuint)(uint)_value.ExtractMostSignificantBits();

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec128<T> operator |(Vec128<T> left, Vec128<T> right) => left._value | right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static bool operator ==(Vec128<T> left, Vec128<T> right) => left._value == right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static bool operator !=(Vec128<T> left, Vec128<T> right) => left._value != right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static implicit operator Vec128<T>(Vector128<byte> value) => Unsafe.As<Vector128<byte>, Vec128<T>>(ref value);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static explicit operator Vector128<byte>(Vec128<T> value) => Unsafe.As<Vec128<T>, Vector128<byte>>(ref value);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public byte[] ToArray()
    {
        byte[] values = new byte[Count];
        _value.CopyTo(values);
        return values;
    }

    public override string ToString() => $"{_value} - \"{System.Text.Encoding.ASCII.GetString(ToArray())}\"";

    public override bool Equals(object obj) => throw new NotSupportedException();
    public override int GetHashCode() => throw new NotSupportedException();
}

[SkipLocalsInit]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode(Messages.T4Template, null)]
internal readonly struct Vec256<T> : ISimdVector<T, Vec256<T>> where T : unmanaged, IBinaryInteger<T>
{
    private readonly Vector256<byte> _value;

    public static bool IsSupported
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get => (typeof(T) == typeof(byte) || typeof(T) == typeof(char)) && Vector256.IsHardwareAccelerated;
    }

    public static int Count
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get => Vector256<byte>.Count;
    }

    public static Vec256<T> Zero
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get => Vector256<byte>.Zero;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec256<T> Equals(Vec256<T> left, Vec256<T> right) => Vector256.Equals(left._value, right._value);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec256<T> Create(T value)
    {
        Debug.Assert(value < T.CreateTruncating(128));
        return Unsafe.SizeOf<T>() switch
        {
            sizeof(byte) => Vector256.Create(Unsafe.BitCast<T, byte>(value)),
            sizeof(char) => Vector256.Create(unchecked((byte)Unsafe.BitCast<T, char>(value))),
            _ => throw new NotSupportedException(),
        };
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec256<T> Create([ConstantExpected] byte value)
    {
        Debug.Assert(value < 128);
        return Vector256.Create(value);
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec256<T> LoadUnaligned(ref readonly T source, nuint offset)
    {
        if (typeof(T) == typeof(byte))
        {
            return Vector256.LoadUnsafe(ref Unsafe.As<T, byte>(ref Unsafe.AsRef(in source)), offset);
        }

        if (typeof(T) != typeof(char))
        {
            throw new NotSupportedException();
        }

        if (Avx512BW.IsSupported)
        {
            var v = Vector512.LoadUnsafe(ref Unsafe.As<T, ushort>(ref Unsafe.AsRef(in source)), offset);
            return Avx512BW.ConvertToVector256ByteWithSaturation(v);
        }

        var v0 = Vector256.LoadUnsafe(ref Unsafe.As<T, ushort>(ref Unsafe.AsRef(in source)), offset);
        var v1 = Vector256.LoadUnsafe(ref Unsafe.As<T, ushort>(ref Unsafe.AsRef(in source)), offset + ((nuint)Vector256<byte>.Count / sizeof(ushort)));

        if (Avx2.IsSupported)
        {
            // Avx2.PackUnsignedSaturate(Vector256.Create((short)1), Vector256.Create((short)2)) will result in
            // 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
            // We want to swap the X and Y bits
            // 1, 1, 1, 1, 1, 1, 1, 1, X, X, X, X, X, X, X, X, Y, Y, Y, Y, Y, Y, Y, Y, 2, 2, 2, 2, 2, 2, 2, 2
            var packed = Avx2.PackUnsignedSaturate(v0.AsInt16(), v1.AsInt16());
            return Avx2.Permute4x64(packed.AsInt64(), 0b_11_01_10_00).AsByte();
        }
        else
        {
            var lower = Vector256.Min(v0, Vector256.Create((ushort)127));
            var upper = Vector256.Min(v1, Vector256.Create((ushort)127));
            return Vector256.Narrow(lower, upper);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public nuint ExtractMostSignificantBits() => (nuint)(uint)_value.ExtractMostSignificantBits();

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec256<T> operator |(Vec256<T> left, Vec256<T> right) => left._value | right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static bool operator ==(Vec256<T> left, Vec256<T> right) => left._value == right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static bool operator !=(Vec256<T> left, Vec256<T> right) => left._value != right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static implicit operator Vec256<T>(Vector256<byte> value) => Unsafe.As<Vector256<byte>, Vec256<T>>(ref value);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static explicit operator Vector256<byte>(Vec256<T> value) => Unsafe.As<Vec256<T>, Vector256<byte>>(ref value);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public byte[] ToArray()
    {
        byte[] values = new byte[Count];
        _value.CopyTo(values);
        return values;
    }

    public override string ToString() => $"{_value} - \"{System.Text.Encoding.ASCII.GetString(ToArray())}\"";

    public override bool Equals(object obj) => throw new NotSupportedException();
    public override int GetHashCode() => throw new NotSupportedException();
}

[SkipLocalsInit]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode(Messages.T4Template, null)]
internal readonly struct Vec512<T> : ISimdVector<T, Vec512<T>> where T : unmanaged, IBinaryInteger<T>
{
    private readonly Vector512<byte> _value;

    public static bool IsSupported
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get => (typeof(T) == typeof(byte) || typeof(T) == typeof(char)) && Vector512.IsHardwareAccelerated;
    }

    public static int Count
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get => Vector512<byte>.Count;
    }

    public static Vec512<T> Zero
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get => Vector512<byte>.Zero;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec512<T> Equals(Vec512<T> left, Vec512<T> right) => Vector512.Equals(left._value, right._value);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec512<T> Create(T value)
    {
        Debug.Assert(value < T.CreateTruncating(128));
        return Unsafe.SizeOf<T>() switch
        {
            sizeof(byte) => Vector512.Create(Unsafe.BitCast<T, byte>(value)),
            sizeof(char) => Vector512.Create(unchecked((byte)Unsafe.BitCast<T, char>(value))),
            _ => throw new NotSupportedException(),
        };
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec512<T> Create([ConstantExpected] byte value)
    {
        Debug.Assert(value < 128);
        return Vector512.Create(value);
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec512<T> LoadUnaligned(ref readonly T source, nuint offset)
    {
        if (typeof(T) == typeof(byte))
        {
            return Vector512.LoadUnsafe(ref Unsafe.As<T, byte>(ref Unsafe.AsRef(in source)), offset);
        }

        if (typeof(T) != typeof(char))
        {
            throw new NotSupportedException();
        }

        var v0 = Vector512.LoadUnsafe(ref Unsafe.As<T, ushort>(ref Unsafe.AsRef(in source)), offset);
        var v1 = Vector512.LoadUnsafe(ref Unsafe.As<T, ushort>(ref Unsafe.AsRef(in source)), offset + ((nuint)Vector512<byte>.Count / sizeof(ushort)));

       if (Avx512BW.IsSupported && Avx512F.IsSupported)
       {
          var packed = Avx512BW.PackUnsignedSaturate(v0.AsInt16(), v1.AsInt16());

          // Avx512BW.PackUnsignedSaturate will interleave the inputs in 8-byte blocks.
          // We want to preserve the order of the two input vectors, so we deinterleave the packed value.
          return Avx512F.PermuteVar8x64(packed.AsInt64(), Vector512.Create(0, 2, 4, 6, 1, 3, 5, 7)).AsByte();
       }
       else
       {
           var lower = Vector512.Min(v0, Vector512.Create((ushort)127));
           var upper = Vector512.Min(v1, Vector512.Create((ushort)127));
           return Vector512.Narrow(lower, upper);
       }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public nuint ExtractMostSignificantBits() => (nuint)(ulong)_value.ExtractMostSignificantBits();

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec512<T> operator |(Vec512<T> left, Vec512<T> right) => left._value | right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static bool operator ==(Vec512<T> left, Vec512<T> right) => left._value == right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static bool operator !=(Vec512<T> left, Vec512<T> right) => left._value != right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static implicit operator Vec512<T>(Vector512<byte> value) => Unsafe.As<Vector512<byte>, Vec512<T>>(ref value);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static explicit operator Vector512<byte>(Vec512<T> value) => Unsafe.As<Vec512<T>, Vector512<byte>>(ref value);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public byte[] ToArray()
    {
        byte[] values = new byte[Count];
        _value.CopyTo(values);
        return values;
    }

    public override string ToString() => $"{_value} - \"{System.Text.Encoding.ASCII.GetString(ToArray())}\"";

    public override bool Equals(object obj) => throw new NotSupportedException();
    public override int GetHashCode() => throw new NotSupportedException();
}

/// <summary>Vector type that is not supported and does nothing.</summary>
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
internal readonly struct NoOpVector<T> : ISimdVector<T, NoOpVector<T>> where T : unmanaged, IBinaryInteger<T>
{
    public static bool IsSupported => false;
    public static int Count => 0;
    public static NoOpVector<T> Zero => default;
    public static NoOpVector<T> Equals(NoOpVector<T> left, NoOpVector<T> right) => default;
    public static NoOpVector<T> Create(T value) => default;
    public static NoOpVector<T> Create(byte value) => default;
    public static NoOpVector<T> LoadUnaligned(ref readonly T source, nuint offset) => default;
    public static NoOpVector<T> LoadAligned(ref T source, nuint offset) => default;
    public nuint ExtractMostSignificantBits() => 0;
    public NoOpVector<T> WithZeroFirstElement() => default;
    public static NoOpVector<T> operator |(NoOpVector<T> left, NoOpVector<T> right) => default;
    public static bool operator ==(NoOpVector<T> left, NoOpVector<T> right) => false;
    public static bool operator !=(NoOpVector<T> left, NoOpVector<T> right) => false;
    public byte[] ToArray() => [];
    public override bool Equals(object obj) => throw new NotSupportedException();
    public override int GetHashCode() => throw new NotSupportedException();
}

// some of the char -> byte narrowing code is from .NET Runtime's Ascii.Utility.cs, MIT license:

// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

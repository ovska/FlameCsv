// <auto-generated />
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.Arm;
using System.Runtime.Intrinsics.Wasm;
using System.Runtime.Intrinsics.X86;
using System.Text;

#pragma warning disable CS0649 // Field is never assigned to, and will always have its default value

namespace FlameCsv.Reading.Internal;

// this code borrows heavily from Ascii.Utility.cs in System.Text.Ascii (MIT license)

[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode(Messages.T4Template, null)]
internal static class SimdVector
{
    /// <summary>
    /// Returns true if T is supported by SIMD vector types, and in case of <see langword="char"/>,
    /// all tokens are ASCII.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static bool IsSupported<T>(ref readonly CsvDialect<T> dialect) where T : unmanaged, IBinaryInteger<T>
    {
        return dialect.IsAscii && TryGetMaxSupportedCount<T>(out int count) && count > 0;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static bool TryGetMaxSupportedCount<T>(out int count) where T : unmanaged
    {
        if (Unsafe.SizeOf<T>() == sizeof(char))
        {
            if (Vec256Char.IsSupported)
            {
                count = Vec256Char.Count;
                return true;
            }
            if (Vec128Char.IsSupported)
            {
                count = Vec128Char.Count;
                return true;
            }
        }
        if (Unsafe.SizeOf<T>() == sizeof(byte))
        {
            if (Vec256Byte.IsSupported)
            {
                count = Vec256Byte.Count;
                return true;
            }
            if (Vec128Byte.IsSupported)
            {
                count = Vec128Byte.Count;
                return true;
            }
        }
        count = 0;
        return false;
    }
}

/// <summary>Generic type wrapping a byte vector.</summary>
[System.CodeDom.Compiler.GeneratedCode(Messages.T4Template, null)]
internal interface ISimdVector<T, TVector>
    where T : unmanaged, IBinaryInteger<T>
    where TVector : struct, ISimdVector<T, TVector>
{
    /// <summary>
    /// Returns <c>true</c> if the vector type is hardware accelerated (on release configuration).
    /// </summary>
    static abstract bool IsSupported { get; }

    /// <summary>
    /// Returns the number of bytes in the vector.
    /// </summary>
    static abstract int Count { get; }

    /// <summary>
    /// Returns a vector with all elements set to zero.
    /// </summary>
    static abstract TVector Zero { get; }

    /// <summary>
    /// Returns an equality vector of the two input vectors.
    /// </summary>
    static abstract TVector Equals(TVector left, TVector right);

    /// <summary>
    /// Creates a vector with all elements set to the specified value.
    /// </summary>
    static abstract TVector Create(T value);

    /// <summary>
    /// Loads a vector from the specified address.
    /// </summary>
    static abstract TVector LoadUnaligned(ref readonly T source, nuint offset);

    /// <summary>
    /// Loads a vector from the specified aligned address.
    /// </summary>
    static abstract TVector LoadAligned(ref T source, nuint offset);

    /// <summary>
    /// Returns a bitwise OR of the two input vectors.
    /// </summary>
    static abstract TVector operator |(TVector left, TVector right);

    /// <summary>
    /// Returns <c>true</c> if the two vectors are equal; otherwise, <c>false</c>.
    /// </summary>
    static abstract bool operator ==(TVector left, TVector right);

    /// <summary>
    /// Returns <c>true</c> if the two vectors are not equal; otherwise, <c>false</c>.
    /// </summary>
    static abstract bool operator !=(TVector left, TVector right);

    /// <summary>
    /// Creates a bitmask of the vector.
    /// </summary>
    [JetBrains.Annotations.Pure] nuint ExtractMostSignificantBits();

    /// <summary>
    /// Returns a copy of the vector with the first element set to zero.
    /// </summary>
    [JetBrains.Annotations.Pure] TVector WithZeroFirstElement();
}


[SkipLocalsInit]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode(Messages.T4Template, null)]
internal readonly struct Vec128Char : ISimdVector<char, Vec128Char>
{
    private readonly Vector128<byte> _value;

    public static bool IsSupported
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get
            => Vector128<byte>.IsSupported
#if RELEASE
            && Vector128.IsHardwareAccelerated
#endif
        ;
    }

    public static int Count
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get => Vector128<byte>.Count;
    }

    public static Vec128Char Zero
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get => Vector128<byte>.Zero;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec128Char Equals(Vec128Char left, Vec128Char right) => Vector128.Equals(left._value, right._value);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec128Char Create(char value)
    {
        Debug.Assert(value < 128);
        return Vector128.Create(unchecked((byte)value));
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec128Char LoadUnaligned(ref readonly char source, nuint offset)
    {
        var v0 = Vector128.LoadUnsafe(ref Unsafe.As<char, ushort>(ref Unsafe.AsRef(in source)), offset);
        var v1 = Vector128.LoadUnsafe(ref Unsafe.As<char, ushort>(ref Unsafe.AsRef(in source)), offset + ((nuint)Vector128<byte>.Count / sizeof(ushort)));
        var lower = Vector128.Min(v0, Vector128.Create((ushort)127));
        var upper = Vector128.Min(v1, Vector128.Create((ushort)127));

        // prefer architecture specific intrinsic as they don't perform additional AND like Vector128.Narrow does
        if (Sse2.IsSupported)
        {
            return Sse2.PackUnsignedSaturate(lower.AsInt16(), upper.AsInt16());
        }
        else if (AdvSimd.Arm64.IsSupported)
        {
            return AdvSimd.Arm64.UnzipEven(lower.AsByte(), upper.AsByte());
        }
        else if (PackedSimd.IsSupported)
        {
            return PackedSimd.ConvertNarrowingSaturateUnsigned(lower.AsInt16(), upper.AsInt16());
        }
        else
        {
            return Vector128.Narrow(lower, upper);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static unsafe Vec128Char LoadAligned(ref char source, nuint offset)
    {
        var v0 = Vector128.LoadAlignedNonTemporal((ushort*)Unsafe.AsPointer(ref Unsafe.Add(ref source, offset)));
        var v1 = Vector128.LoadAlignedNonTemporal((ushort*)Unsafe.AsPointer(ref Unsafe.Add(ref source, offset + ((nuint)Vector128<byte>.Count / sizeof(ushort)))));
        var lower = Vector128.Min(v0, Vector128.Create((ushort)127));
        var upper = Vector128.Min(v1, Vector128.Create((ushort)127));

        // prefer architecture specific intrinsic as they don't perform additional AND like Vector128.Narrow does
        if (Sse2.IsSupported)
        {
            return Sse2.PackUnsignedSaturate(lower.AsInt16(), upper.AsInt16());
        }
        else if (AdvSimd.Arm64.IsSupported)
        {
            return AdvSimd.Arm64.UnzipEven(lower.AsByte(), upper.AsByte());
        }
        else if (PackedSimd.IsSupported)
        {
            return PackedSimd.ConvertNarrowingSaturateUnsigned(lower.AsInt16(), upper.AsInt16());
        }
        else
        {
            return Vector128.Narrow(lower, upper);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public nuint ExtractMostSignificantBits() => (nuint)_value.ExtractMostSignificantBits();

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public Vec128Char WithZeroFirstElement() => _value.WithElement(0, default);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec128Char operator |(Vec128Char left, Vec128Char right) => left._value | right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static bool operator ==(Vec128Char left, Vec128Char right) => left._value == right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static bool operator !=(Vec128Char left, Vec128Char right) => left._value != right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static implicit operator Vec128Char(Vector128<byte> value) => Unsafe.As<Vector128<byte>, Vec128Char>(ref value);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static explicit operator Vector128<byte>(Vec128Char value) => Unsafe.As<Vec128Char, Vector128<byte>>(ref value);

    public override string ToString() => _value.ToString();
    public override bool Equals(object obj) => throw new NotSupportedException();
    public override int GetHashCode() => throw new NotSupportedException();
}

[SkipLocalsInit]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode(Messages.T4Template, null)]
internal readonly struct Vec256Char : ISimdVector<char, Vec256Char>
{
    private readonly Vector256<byte> _value;

    public static bool IsSupported
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get
            => Vector256<byte>.IsSupported
#if RELEASE
            && Vector256.IsHardwareAccelerated
#endif
        ;
    }

    public static int Count
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get => Vector256<byte>.Count;
    }

    public static Vec256Char Zero
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get => Vector256<byte>.Zero;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec256Char Equals(Vec256Char left, Vec256Char right) => Vector256.Equals(left._value, right._value);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec256Char Create(char value)
    {
        Debug.Assert(value < 128);
        return Vector256.Create(unchecked((byte)value));
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec256Char LoadUnaligned(ref readonly char source, nuint offset)
    {
        var v0 = Vector256.LoadUnsafe(ref Unsafe.As<char, ushort>(ref Unsafe.AsRef(in source)), offset);
        var v1 = Vector256.LoadUnsafe(ref Unsafe.As<char, ushort>(ref Unsafe.AsRef(in source)), offset + ((nuint)Vector256<byte>.Count / sizeof(ushort)));
        var lower = Vector256.Min(v0, Vector256.Create((ushort)127));
        var upper = Vector256.Min(v1, Vector256.Create((ushort)127));

        if (Avx2.IsSupported)
        {
            // Avx2.PackUnsignedSaturate(Vector256.Create((short)1), Vector256.Create((short)2)) will result in
            // 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
            // We want to swap the X and Y bits
            // 1, 1, 1, 1, 1, 1, 1, 1, X, X, X, X, X, X, X, X, Y, Y, Y, Y, Y, Y, Y, Y, 2, 2, 2, 2, 2, 2, 2, 2
            var packed = Avx2.PackUnsignedSaturate(lower.AsInt16(), upper.AsInt16());
            return Avx2.Permute4x64(packed.AsInt64(), 0b_11_01_10_00).AsByte();
        }
        else
        {
            return Vector256.Narrow(lower, upper);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static unsafe Vec256Char LoadAligned(ref char source, nuint offset)
    {
        var v0 = Vector256.LoadAlignedNonTemporal((ushort*)Unsafe.AsPointer(ref Unsafe.Add(ref source, offset)));
        var v1 = Vector256.LoadAlignedNonTemporal((ushort*)Unsafe.AsPointer(ref Unsafe.Add(ref source, offset + ((nuint)Vector256<byte>.Count / sizeof(ushort)))));
        var lower = Vector256.Min(v0, Vector256.Create((ushort)127));
        var upper = Vector256.Min(v1, Vector256.Create((ushort)127));

        if (Avx2.IsSupported)
        {
            // Avx2.PackUnsignedSaturate(Vector256.Create((short)1), Vector256.Create((short)2)) will result in
            // 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
            // We want to swap the X and Y bits
            // 1, 1, 1, 1, 1, 1, 1, 1, X, X, X, X, X, X, X, X, Y, Y, Y, Y, Y, Y, Y, Y, 2, 2, 2, 2, 2, 2, 2, 2
            var packed = Avx2.PackUnsignedSaturate(lower.AsInt16(), upper.AsInt16());
            return Avx2.Permute4x64(packed.AsInt64(), 0b_11_01_10_00).AsByte();
        }
        else
        {
            return Vector256.Narrow(lower, upper);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public nuint ExtractMostSignificantBits() => (nuint)_value.ExtractMostSignificantBits();

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public Vec256Char WithZeroFirstElement() => _value.WithElement(0, default);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec256Char operator |(Vec256Char left, Vec256Char right) => left._value | right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static bool operator ==(Vec256Char left, Vec256Char right) => left._value == right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static bool operator !=(Vec256Char left, Vec256Char right) => left._value != right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static implicit operator Vec256Char(Vector256<byte> value) => Unsafe.As<Vector256<byte>, Vec256Char>(ref value);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static explicit operator Vector256<byte>(Vec256Char value) => Unsafe.As<Vec256Char, Vector256<byte>>(ref value);

    public override string ToString() => _value.ToString();
    public override bool Equals(object obj) => throw new NotSupportedException();
    public override int GetHashCode() => throw new NotSupportedException();
}

[SkipLocalsInit]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode(Messages.T4Template, null)]
internal readonly struct Vec128Byte : ISimdVector<byte, Vec128Byte>
{
    private readonly Vector128<byte> _value;

    public static bool IsSupported
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get
            => Vector128<byte>.IsSupported
#if RELEASE
            && Vector128.IsHardwareAccelerated
#endif
        ;
    }

    public static int Count
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get => Vector128<byte>.Count;
    }

    public static Vec128Byte Zero
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get => Vector128<byte>.Zero;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec128Byte Equals(Vec128Byte left, Vec128Byte right) => Vector128.Equals(left._value, right._value);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec128Byte Create(byte value)
    {
        Debug.Assert(value < 128);
        return Vector128.Create(value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec128Byte LoadUnaligned(ref readonly byte source, nuint offset) => Vector128.LoadUnsafe(in source, offset);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static unsafe Vec128Byte LoadAligned(ref byte source, nuint offset) => Vector128.LoadAligned((byte*)Unsafe.AsPointer(ref Unsafe.AsRef(in source)) + offset);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public nuint ExtractMostSignificantBits() => (nuint)_value.ExtractMostSignificantBits();

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public Vec128Byte WithZeroFirstElement() => _value.WithElement(0, default);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec128Byte operator |(Vec128Byte left, Vec128Byte right) => left._value | right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static bool operator ==(Vec128Byte left, Vec128Byte right) => left._value == right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static bool operator !=(Vec128Byte left, Vec128Byte right) => left._value != right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static implicit operator Vec128Byte(Vector128<byte> value) => Unsafe.As<Vector128<byte>, Vec128Byte>(ref value);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static explicit operator Vector128<byte>(Vec128Byte value) => Unsafe.As<Vec128Byte, Vector128<byte>>(ref value);

    public override string ToString() => _value.ToString();
    public override bool Equals(object obj) => throw new NotSupportedException();
    public override int GetHashCode() => throw new NotSupportedException();
}

[SkipLocalsInit]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode(Messages.T4Template, null)]
internal readonly struct Vec256Byte : ISimdVector<byte, Vec256Byte>
{
    private readonly Vector256<byte> _value;

    public static bool IsSupported
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get
            => Vector256<byte>.IsSupported
#if RELEASE
            && Vector256.IsHardwareAccelerated
#endif
        ;
    }

    public static int Count
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get => Vector256<byte>.Count;
    }

    public static Vec256Byte Zero
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
        get => Vector256<byte>.Zero;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec256Byte Equals(Vec256Byte left, Vec256Byte right) => Vector256.Equals(left._value, right._value);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec256Byte Create(byte value)
    {
        Debug.Assert(value < 128);
        return Vector256.Create(value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec256Byte LoadUnaligned(ref readonly byte source, nuint offset) => Vector256.LoadUnsafe(in source, offset);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static unsafe Vec256Byte LoadAligned(ref byte source, nuint offset) => Vector256.LoadAligned((byte*)Unsafe.AsPointer(ref Unsafe.AsRef(in source)) + offset);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public nuint ExtractMostSignificantBits() => (nuint)_value.ExtractMostSignificantBits();

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public Vec256Byte WithZeroFirstElement() => _value.WithElement(0, default);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static Vec256Byte operator |(Vec256Byte left, Vec256Byte right) => left._value | right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static bool operator ==(Vec256Byte left, Vec256Byte right) => left._value == right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static bool operator !=(Vec256Byte left, Vec256Byte right) => left._value != right._value;

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static implicit operator Vec256Byte(Vector256<byte> value) => Unsafe.As<Vector256<byte>, Vec256Byte>(ref value);

    [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough]
    public static explicit operator Vector256<byte>(Vec256Byte value) => Unsafe.As<Vec256Byte, Vector256<byte>>(ref value);

    public override string ToString() => _value.ToString();
    public override bool Equals(object obj) => throw new NotSupportedException();
    public override int GetHashCode() => throw new NotSupportedException();
}

/// <summary>Vector type that that is not supported and does nothing.</summary>
internal readonly struct NoOpVector<T> : ISimdVector<T, NoOpVector<T>> where T : unmanaged, IBinaryInteger<T>
{
    public static bool IsSupported => false;
    public static int Count => 0;
    public static NoOpVector<T> Zero => throw new NotSupportedException();
    public static NoOpVector<T> Equals(NoOpVector<T> left, NoOpVector<T> right) => throw new NotSupportedException();
    public static NoOpVector<T> Create(T value) => throw new NotSupportedException();
    public static NoOpVector<T> LoadUnaligned(ref readonly T source, nuint offset) => throw new NotSupportedException();
    public static NoOpVector<T> LoadAligned(ref T source, nuint offset) => throw new NotSupportedException();
    public nuint ExtractMostSignificantBits() => throw new NotSupportedException();
    public NoOpVector<T> WithZeroFirstElement() => throw new NotSupportedException();
    public static NoOpVector<T> operator |(NoOpVector<T> left, NoOpVector<T> right) => throw new NotSupportedException();
    public static bool operator ==(NoOpVector<T> left, NoOpVector<T> right) => throw new NotSupportedException();
    public static bool operator !=(NoOpVector<T> left, NoOpVector<T> right) => throw new NotSupportedException();
    public override bool Equals(object obj) => throw new NotSupportedException();
    public override int GetHashCode() => throw new NotSupportedException();
}

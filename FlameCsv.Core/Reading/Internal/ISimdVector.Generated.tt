<#@ template language="C#" #>
<#
    const string MethodImpl = "MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerStepThrough";
    const string PragmaCondition = "RELEASE";

    string[] sizes = ["128", "256", "512"];

    (string keyword, string name)[] types = [("char", "Char"), ("byte", "Byte")];

    const string Narrow128 = """

                                     // prefer architecture specific intrinsic as they don't perform additional AND like Vector128.Narrow does
                                     if (Sse2.IsSupported)
                                     {
                                         return Sse2.PackUnsignedSaturate(v0.AsInt16(), v1.AsInt16());
                                     }
                                     else if (AdvSimd.Arm64.IsSupported)
                                     {
                                         return AdvSimd.Arm64.UnzipEven(v0.AsByte(), v1.AsByte());
                                     }
                                     else if (PackedSimd.IsSupported)
                                     {
                                         return PackedSimd.ConvertNarrowingSaturateUnsigned(v0.AsInt16(), v1.AsInt16());
                                     }
                                     else
                                     {
                                         var lower = Vector128.Min(v0, Vector128.Create((ushort)127));
                                         var upper = Vector128.Min(v1, Vector128.Create((ushort)127));
                                         return Vector128.Narrow(lower, upper);
                                     }
                             """;

    const string Narrow256 = """

                                    if (Avx2.IsSupported)
                                    {
                                        // Avx2.PackUnsignedSaturate(Vector256.Create((short)1), Vector256.Create((short)2)) will result in
                                        // 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
                                        // We want to swap the X and Y bits
                                        // 1, 1, 1, 1, 1, 1, 1, 1, X, X, X, X, X, X, X, X, Y, Y, Y, Y, Y, Y, Y, Y, 2, 2, 2, 2, 2, 2, 2, 2
                                        var packed = Avx2.PackUnsignedSaturate(v0.AsInt16(), v1.AsInt16());
                                        return Avx2.Permute4x64(packed.AsInt64(), 0b_11_01_10_00).AsByte();
                                    }
                                    else
                                    {
                                        var lower = Vector256.Min(v0, Vector256.Create((ushort)127));
                                        var upper = Vector256.Min(v1, Vector256.Create((ushort)127));
                                        return Vector256.Narrow(lower, upper);
                                    }
                            """;

    const string Narrow512 = """

                                    if (Avx512BW.IsSupported && Avx512F.IsSupported)
                                    {
                                       var packed = Avx512BW.PackUnsignedSaturate(v0.AsInt16(), v1.AsInt16());

                                       // Avx512BW.PackUnsignedSaturate will interleave the inputs in 8-byte blocks.
                                       // We want to preserve the order of the two input vectors, so we deinterleave the packed value.
                                       return Avx512F.PermuteVar8x64(packed.AsInt64(), Vector512.Create(0, 2, 4, 6, 1, 3, 5, 7)).AsByte();
                                    }
                                    else
                                    {
                                        var lower = Vector512.Min(v0, Vector512.Create((ushort)127));
                                        var upper = Vector512.Min(v1, Vector512.Create((ushort)127));
                                        return Vector512.Narrow(lower, upper);
                                    }
                             """;

    void WriteNarrowing(string size)
    {
        if (size == "128")
        {
            WriteLine(Narrow128);
        }
        else if (size == "256")
        {
            WriteLine(Narrow256);
        }
        else if (size == "512")
        {
            WriteLine(Narrow512);
        }
        else
        {
            Write("        return Vector");
            Write(size);
            WriteLine(".Narrow(lower, upper);");
        }
    }
#>
// <auto-generated />
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.Arm;
using System.Runtime.Intrinsics.Wasm;
using System.Runtime.Intrinsics.X86;
using System.Text;

#pragma warning disable CS0649 // Field is never assigned to, and will always have its default value

namespace FlameCsv.Reading.Internal;

// this code borrows heavily from Ascii.Utility.cs in System.Text.Ascii (MIT license)

internal static class SimdVector
{
    /// <summary>
    /// Returns <c>true</c> if any of the vector types are hardware accelerated.
    /// </summary>
    public static bool SupportsAny =>
#if <#= PragmaCondition #>
        <#
    for (int i = 0; i < sizes.Length; i++)
    {
        if (i != 0) Write(" || ");
        Write("Vector");
        Write(sizes[i]);
        Write(".IsHardwareAccelerated");
    } #>;
#else
        true;
#endif
}

/// <summary>Generic type wrapping a byte vector.</summary>
[System.CodeDom.Compiler.GeneratedCode(Messages.T4Template, null)]
internal interface ISimdVector<T, TVector>
    where T : unmanaged, IBinaryInteger<T>
    where TVector : struct, ISimdVector<T, TVector>
{
    /// <summary>
    /// Returns <c>true</c> if the vector type is hardware accelerated (on release configuration).
    /// </summary>
    static abstract bool IsSupported { get; }

    /// <summary>
    /// Returns the number of bytes in the vector.
    /// </summary>
    static abstract int Count { get; }

    /// <summary>
    /// Returns a vector with all elements set to zero.
    /// </summary>
    static abstract TVector Zero { get; }

    /// <summary>
    /// Returns an equality vector of the two input vectors.
    /// </summary>
    static abstract TVector Equals(TVector left, TVector right);

    /// <summary>
    /// Creates a vector with all elements set to the specified value.
    /// </summary>
    static abstract TVector Create(T value);

    /// <summary>
    /// Loads a vector from the specified address.
    /// </summary>
    static abstract TVector LoadUnaligned(ref readonly T source, nuint offset);

    /// <summary>
    /// Returns a bitwise OR of the two input vectors.
    /// </summary>
    static abstract TVector operator |(TVector left, TVector right);

    /// <summary>
    /// Returns <c>true</c> if the two vectors are equal; otherwise, <c>false</c>.
    /// </summary>
    static abstract bool operator ==(TVector left, TVector right);

    /// <summary>
    /// Returns <c>true</c> if the two vectors are not equal; otherwise, <c>false</c>.
    /// </summary>
    static abstract bool operator !=(TVector left, TVector right);

    /// <summary>
    /// Creates a bitmask of the vector.
    /// </summary>
    [JetBrains.Annotations.Pure] nuint ExtractMostSignificantBits();

    /// <summary>
    /// Returns a copy of the vector with the first element set to zero.
    /// </summary>
    [JetBrains.Annotations.Pure] TVector WithZeroFirstElement();

    /// <summary>
    /// Returns the bytes of the vector allocated to a new array.
    /// </summary>
    [JetBrains.Annotations.Pure] byte[] ToArray();
}

<#
    foreach (var (keyword, name) in types)
        foreach (var size in sizes)
        {
            string typeName = $"Vec{size}{name}";
#>

[SkipLocalsInit]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode(Messages.T4Template, null)]
internal readonly struct <#= typeName #> : ISimdVector<<#= keyword #>, <#= typeName #>>
{
    private readonly Vector<#= size #><byte> _value;

    public static bool IsSupported
    {
        [<#= MethodImpl #>]
        get
            => Vector<#= size #><byte>.IsSupported
#if <#= PragmaCondition #>
            && Vector<#= size #>.IsHardwareAccelerated
#endif
        ;
    }

    public static int Count
    {
        [<#= MethodImpl #>]
        get => Vector<#= size #><byte>.Count;
    }

    public static <#= typeName #> Zero
    {
        [<#= MethodImpl #>]
        get => Vector<#= size #><byte>.Zero;
    }

    [<#= MethodImpl #>]
    public static <#= typeName #> Equals(<#= typeName #> left, <#= typeName #> right) => Vector<#= size #>.Equals(left._value, right._value);

    [<#= MethodImpl #>]
    public static <#= typeName #> Create(<#= keyword #> value)
    {
        Debug.Assert(value < 128);
        return Vector<#= size #>.Create(<#
            Write(keyword != "byte" ? "unchecked((byte)value)" : "value");
#>);
    }

    [<#= MethodImpl #>]
    public static <#= typeName #> LoadUnaligned(ref readonly <#= keyword #> source, nuint offset)<#
            if (keyword == "byte")
            {
                Write(" => Vector");
                Write(size);
                Write(".LoadUnsafe(in source, offset);");
            }
            else if (size is "128" or "256" or "512")
            {
#>

    {
        var v0 = Vector<#= size #>.LoadUnsafe(ref Unsafe.As<char, ushort>(ref Unsafe.AsRef(in source)), offset);
        var v1 = Vector<#= size #>.LoadUnsafe(ref Unsafe.As<char, ushort>(ref Unsafe.AsRef(in source)), offset + ((nuint)Vector<#= size #><byte>.Count / sizeof(ushort)));
<#
                WriteNarrowing(size);
#>
    }<#
            }
            else
            {
                Write(" => throw new NotImplementedException();");
            }
#>


    [<#= MethodImpl #>]
    public nuint ExtractMostSignificantBits() => (nuint)<#= size == "512" ? "(ulong)" : "" #>_value.ExtractMostSignificantBits();
<#
            // if (isa.Length == 0)
            // {
            //     WriteLine("(nuint)_value.ExtractMostSignificantBits();");
            // }
            // else
            // {
            //     WriteLine("");
            //
            //     for (var index = isa.Length - 1; index >= 0; index--)
            //     {
            //         var instructionSet = isa[index];
            //         Write("        ");
            //         Write(instructionSet);
            //         Write(".IsSupported ? (nuint)");
            //         Write(size == "512" ? "(ulong)" : "(uint)");
            //         Write(instructionSet);
            //         WriteLine(".MoveMask(_value) : ");
            //     }
            //     WriteLine("        (nuint)_value.ExtractMostSignificantBits();");
            // }
#>

    [<#= MethodImpl #>]
    public <#= typeName #> WithZeroFirstElement() => _value.WithElement(0, default);

    [<#= MethodImpl #>]
    public static <#= typeName #> operator |(<#= typeName #> left, <#= typeName #> right) => left._value | right._value;

    [<#= MethodImpl #>]
    public static bool operator ==(<#= typeName #> left, <#= typeName #> right) => left._value == right._value;

    [<#= MethodImpl #>]
    public static bool operator !=(<#= typeName #> left, <#= typeName #> right) => left._value != right._value;

    [<#= MethodImpl #>]
    public static implicit operator <#= typeName #>(Vector<#= size #><byte> value) => Unsafe.As<Vector<#= size #><byte>, <#= typeName #>>(ref value);

    [<#= MethodImpl #>]
    public static explicit operator Vector<#= size #><byte>(<#= typeName #> value) => Unsafe.As<<#= typeName #>, Vector<#= size #><byte>>(ref value);

    [<#= MethodImpl #>]
    public byte[] ToArray()
    {
        byte[] values = new byte[Count];
        _value.CopyTo(values);
        return values;
    }

    public override string ToString() => _value.ToString() + " " + System.Text.Encoding.ASCII.GetString(ToArray());

    public override bool Equals(object obj) => throw new NotSupportedException();
    public override int GetHashCode() => throw new NotSupportedException();
}
<#
        }
#>

/// <summary>Vector type that is not supported and does nothing.</summary>
internal readonly struct NoOpVector<T> : ISimdVector<T, NoOpVector<T>> where T : unmanaged, IBinaryInteger<T>
{
    public static bool IsSupported => false;
    public static int Count => 0;
    public static NoOpVector<T> Zero => default;
    public static NoOpVector<T> Equals(NoOpVector<T> left, NoOpVector<T> right) => default;
    public static NoOpVector<T> Create(T value) => default;
    public static NoOpVector<T> LoadUnaligned(ref readonly T source, nuint offset) => default;
    public static NoOpVector<T> LoadAligned(ref T source, nuint offset) => default;
    public nuint ExtractMostSignificantBits() => 0;
    public NoOpVector<T> WithZeroFirstElement() => default;
    public static NoOpVector<T> operator |(NoOpVector<T> left, NoOpVector<T> right) => default;
    public static bool operator ==(NoOpVector<T> left, NoOpVector<T> right) => false;
    public static bool operator !=(NoOpVector<T> left, NoOpVector<T> right) => false;
    public byte[] ToArray() => [];
    public override bool Equals(object obj) => throw new NotSupportedException();
    public override int GetHashCode() => throw new NotSupportedException();
}

// <auto-generated />
#nullable enable
using System.IO.Pipelines;
using System.Runtime.CompilerServices;
using System.Text;
using FlameCsv.Binding;
using FlameCsv.Writing;

namespace FlameCsv;

static partial class CsvWriter
{
    /// <summary>
    /// Writes the values as CSV records to a string using <see cref="CsvOptions{T}.TypeBinder"/>.
    /// </summary>
    /// <param name="values">Values to write</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="builder">Optional builder to write the CSV to.</param>
    /// <returns>
    /// <see cref="StringBuilder"/> containing the CSV (same instance as <paramref name="builder"/> if provided)
    /// </returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    [RUF(Messages.Reflection), RDC(Messages.DynamicCode)]
    public static StringBuilder WriteToString<[DAM(Messages.ReflectionBound)] TValue>(
        IEnumerable<TValue> values,
        CsvOptions<char>? options = null,
        StringBuilder? builder = null)
    {
        ArgumentNullException.ThrowIfNull(values);

        options ??= CsvOptions<char>.Default;
        IDematerializer<char, TValue> dematerializer = options.TypeBinder.GetDematerializer<TValue>();

        builder ??= new();
        using var writer = CsvFieldWriter.Create(new StringWriter(builder), options, bufferSize: -1, leaveOpen: false);
        WriteCore(values, writer, dematerializer);
        return builder;
    }

    /// <summary>
    /// Writes the values as CSV records to a file using <see cref="CsvOptions{T}.TypeBinder"/>.
    /// </summary>
    /// <param name="path">Path of the destination file. Existing files are overwritten</param>
    /// <param name="values">Values to write</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    [RUF(Messages.Reflection), RDC(Messages.DynamicCode)]
    public static void WriteToFile<[DAM(Messages.ReflectionBound)] TValue>(
        string path,
        IEnumerable<TValue> values,
        CsvOptions<byte>? options = null)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(path);
        ArgumentNullException.ThrowIfNull(values);

        options ??= CsvOptions<byte>.Default;
        IDematerializer<byte, TValue> dematerializer = options.TypeBinder.GetDematerializer<TValue>();

        using FileStream stream = GetFileStream(path, isAsync: false);

        using var writer = CsvFieldWriter.Create(stream, options);
        WriteCore(values, writer, dematerializer);
    }

    /// <summary>
    /// Writes the values as CSV records to a file using <see cref="CsvOptions{T}.TypeBinder"/>.
    /// </summary>
    /// <param name="path">Path of the destination file. Existing files are overwritten</param>
    /// <param name="values">Values to write</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="encoding">Encoding to pass to the inner <see cref="StreamWriter"/></param>
    /// <param name="bufferSize">Buffer size to use for writing</param>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    [OverloadResolutionPriority(-1)] // prefer byte to char when writing to file
    [RUF(Messages.Reflection), RDC(Messages.DynamicCode)]
    public static void WriteToFile<[DAM(Messages.ReflectionBound)] TValue>(
        string path,
        IEnumerable<TValue> values,
        CsvOptions<char>? options = null,
        Encoding? encoding = null,
        int bufferSize = -1)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(path);
        ArgumentNullException.ThrowIfNull(values);

        options ??= CsvOptions<char>.Default;
        IDematerializer<char, TValue> dematerializer = options.TypeBinder.GetDematerializer<TValue>();

        if (bufferSize == -1) bufferSize = DefaultFileStreamBufferSize;

        using FileStream stream = GetFileStream(path, isAsync: false, bufferSize);
        using var writer = CsvFieldWriter.Create(new StreamWriter(stream, encoding, bufferSize, false), options, bufferSize, leaveOpen: false);

        WriteCore(values, writer, dematerializer);
    }

    /// <summary>
    /// Writes the values as CSV records to the <see cref="TextWriter"/> using <see cref="CsvOptions{T}.TypeBinder"/>.
    /// </summary>
    /// <param name="textWriter">Writer to write the CSV to</param>
    /// <param name="values">Values to write</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="bufferSize">Buffer size to use for writing</param>
    /// <param name="leaveOpen">Whether to leave the writer open after writing</param>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    [RUF(Messages.Reflection), RDC(Messages.DynamicCode)]
    public static void Write<[DAM(Messages.ReflectionBound)] TValue>(
        TextWriter textWriter,
        IEnumerable<TValue> values,
        CsvOptions<char>? options = null,
        int bufferSize = -1,
        bool leaveOpen = false)
    {
        ArgumentNullException.ThrowIfNull(textWriter);
        ArgumentNullException.ThrowIfNull(values);

        options ??= CsvOptions<char>.Default;
        IDematerializer<char, TValue> dematerializer = options.TypeBinder.GetDematerializer<TValue>();

        using var writer = CsvFieldWriter.Create(textWriter, options, bufferSize, leaveOpen);
        WriteCore(values, writer, dematerializer);
    }

    /// <summary>
    /// Writes the values as CSV records to the <see cref="Stream"/> using <see cref="CsvOptions{T}.TypeBinder"/>.
    /// </summary>
    /// <param name="stream">Stream to write the CSV to</param>
    /// <param name="values">Values to write</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="bufferSize">Buffer size to use for writing</param>
    /// <param name="leaveOpen">Whether to leave the stream open after writing</param>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    [RUF(Messages.Reflection), RDC(Messages.DynamicCode)]
    public static void Write<[DAM(Messages.ReflectionBound)] TValue>(
        Stream stream,
        IEnumerable<TValue> values,
        CsvOptions<byte>? options = null,
        int bufferSize = -1,
        bool leaveOpen = false)
    {
        FlameCsv.Extensions.Guard.CanWrite(stream);
        ArgumentNullException.ThrowIfNull(values);

        options ??= CsvOptions<byte>.Default;
        IDematerializer<byte, TValue> dematerializer = options.TypeBinder.GetDematerializer<TValue>();

        using var writer = CsvFieldWriter.Create(stream, options, bufferSize, leaveOpen);
        WriteCore(values, writer, dematerializer);
    }

    /// <summary>
    /// Asynchronously writes the values as CSV records to the <see cref="TextWriter"/> using <see cref="CsvOptions{T}.TypeBinder"/>.
    /// </summary>
    /// <param name="textWriter">Writer to write the CSV to</param>
    /// <param name="values">Values to write</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="bufferSize">Buffer size to use for writing</param>
    /// <param name="leaveOpen">Whether to leave the writer open after writing</param>
    /// <param name="cancellationToken">Token to cancel the writing operation</param>
    /// <returns>Task representing the asynchronous writing operation</returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    [RUF(Messages.Reflection), RDC(Messages.DynamicCode)]
    public static async Task WriteAsync<[DAM(Messages.ReflectionBound)] TValue>(
        TextWriter textWriter,
        IEnumerable<TValue> values,
        CsvOptions<char>? options = null,
        int bufferSize = -1,
        bool leaveOpen = false,
        CancellationToken cancellationToken = default)
    {
        ArgumentNullException.ThrowIfNull(textWriter);
        ArgumentNullException.ThrowIfNull(values);

        await using (textWriter.ConfigureAwait(false))
        {
            cancellationToken.ThrowIfCancellationRequested();

            options ??= CsvOptions<char>.Default;
            IDematerializer<char, TValue> dematerializer = options.TypeBinder.GetDematerializer<TValue>();

            using var writer = CsvFieldWriter.Create(textWriter, options, bufferSize, leaveOpen);

            await WriteAsyncCore(
                values,
                writer,
                dematerializer,
                cancellationToken)
                .ConfigureAwait(false);
        }
    }

    /// <summary>
    /// Asynchronously writes the values as CSV records to the <see cref="Stream"/> using <see cref="CsvOptions{T}.TypeBinder"/>.
    /// </summary>
    /// <param name="stream">Stream to write the CSV to</param>
    /// <param name="values">Values to write</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="bufferSize">Buffer size to use for writing</param>
    /// <param name="leaveOpen">Whether to leave the stream open after writing</param>
    /// <param name="cancellationToken">Token to cancel the writing operation</param>
    /// <returns>Task representing the asynchronous writing operation</returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    [RUF(Messages.Reflection), RDC(Messages.DynamicCode)]
    public static async Task WriteAsync<[DAM(Messages.ReflectionBound)] TValue>(
        Stream stream,
        IEnumerable<TValue> values,
        CsvOptions<byte>? options = null,
        int bufferSize = -1,
        bool leaveOpen = false,
        CancellationToken cancellationToken = default)
    {
        FlameCsv.Extensions.Guard.CanWrite(stream);
        ArgumentNullException.ThrowIfNull(values);

        try
        {
            cancellationToken.ThrowIfCancellationRequested();
            options ??= CsvOptions<byte>.Default;
            IDematerializer<byte, TValue> dematerializer = options.TypeBinder.GetDematerializer<TValue>();

            using var writer = CsvFieldWriter.Create(stream, options, bufferSize, leaveOpen);

            await WriteAsyncCore(
                values,
                writer,
                dematerializer,
                cancellationToken)
                .ConfigureAwait(false);
        }
        finally
        {
            if (!leaveOpen) await stream.DisposeAsync().ConfigureAwait(false);
        }
    }

    /// <summary>
    /// Asynchronously writes the values as CSV records to the <see cref="PipeWriter"/> using <see cref="CsvOptions{T}.TypeBinder"/>.
    /// </summary>
    /// <param name="pipe">Pipe to write the CSV to</param>
    /// <param name="values">Values to write</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="cancellationToken">Token to cancel the writing operation</param>
    /// <returns>Task representing the asynchronous writing operation</returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    [RUF(Messages.Reflection), RDC(Messages.DynamicCode)]
    public static async Task WriteAsync<[DAM(Messages.ReflectionBound)] TValue>(
        PipeWriter pipe,
        IEnumerable<TValue> values,
        CsvOptions<byte>? options = null,
        CancellationToken cancellationToken = default)
    {
        ArgumentNullException.ThrowIfNull(pipe);
        ArgumentNullException.ThrowIfNull(values);

        if (cancellationToken.IsCancellationRequested)
        {
            OperationCanceledException exception = new(cancellationToken);
            await pipe.CompleteAsync(exception).ConfigureAwait(false);
            throw exception;
        }

        options ??= CsvOptions<byte>.Default;
        IDematerializer<byte, TValue> dematerializer = options.TypeBinder.GetDematerializer<TValue>();

        using var writer = CsvFieldWriter.Create(pipe, options);

        await WriteAsyncCore(
            values,
            writer,
            dematerializer,
            cancellationToken)
            .ConfigureAwait(false);
    }

    /// <summary>
    /// Asynchronously writes the values as CSV records to a file using <see cref="CsvOptions{T}.TypeBinder"/>.
    /// </summary>
    /// <param name="path">Path of the destination file. Existing files are overwritten</param>
    /// <param name="values">Values to write</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="cancellationToken">Token to cancel the writing operation</param>
    /// <returns>Task representing the asynchronous writing operation</returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    [RUF(Messages.Reflection), RDC(Messages.DynamicCode)]
    public static async Task WriteToFileAsync<[DAM(Messages.ReflectionBound)] TValue>(
        string path,
        IEnumerable<TValue> values,
        CsvOptions<byte>? options = null,
        CancellationToken cancellationToken = default)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(path);
        ArgumentNullException.ThrowIfNull(values);

        cancellationToken.ThrowIfCancellationRequested();

        options ??= CsvOptions<byte>.Default;
        IDematerializer<byte, TValue> dematerializer = options.TypeBinder.GetDematerializer<TValue>();

        FileStream stream = GetFileStream(path, isAsync: true);
        await using (stream.ConfigureAwait(false))
        {
            using var writer = CsvFieldWriter.Create(stream, options);

            await WriteAsyncCore(
                values,
                writer,
                dematerializer,
                cancellationToken)
                .ConfigureAwait(false);
        }
    }

    /// <summary>
    /// Asynchronously writes the values as CSV records to a file using <see cref="CsvOptions{T}.TypeBinder"/>.
    /// </summary>
    /// <param name="path">Path of the destination file. Existing files are overwritten</param>
    /// <param name="values">Values to write</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="encoding">Encoding to pass to the inner <see cref="StreamWriter"/></param>
    /// <param name="bufferSize">Buffer size to use for writing</param>
    /// <param name="cancellationToken">Token to cancel the writing operation</param>
    /// <returns>Task representing the asynchronous writing operation</returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    [OverloadResolutionPriority(-1)] // prefer byte to char when writing to file
    [RUF(Messages.Reflection), RDC(Messages.DynamicCode)]
    public static async Task WriteToFileAsync<[DAM(Messages.ReflectionBound)] TValue>(
        string path,
        IEnumerable<TValue> values,
        CsvOptions<char>? options = null,
        Encoding? encoding = null,
        int bufferSize = -1,
        CancellationToken cancellationToken = default)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(path);
        ArgumentNullException.ThrowIfNull(values);

        cancellationToken.ThrowIfCancellationRequested();

        options ??= CsvOptions<char>.Default;
        IDematerializer<char, TValue> dematerializer = options.TypeBinder.GetDematerializer<TValue>();

        if (bufferSize == -1) bufferSize = DefaultFileStreamBufferSize;

        FileStream stream = GetFileStream(path, isAsync: true, bufferSize);
        await using (stream.ConfigureAwait(false))
        {
            using var writer = CsvFieldWriter.Create(new StreamWriter(stream, encoding, bufferSize, false), options, bufferSize, leaveOpen: false);

            await WriteAsyncCore(
                values,
                writer,
                dematerializer,
                cancellationToken)
                .ConfigureAwait(false);
        }
    }

    /// <summary>
    /// Asynchronously writes the values as CSV records to the <see cref="TextWriter"/> using <see cref="CsvOptions{T}.TypeBinder"/>.
    /// </summary>
    /// <param name="textWriter">Writer to write the CSV to</param>
    /// <param name="values">Values to write</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="bufferSize">Buffer size to use for writing</param>
    /// <param name="leaveOpen">Whether to leave the writer open after writing</param>
    /// <param name="cancellationToken">Token to cancel the writing operation</param>
    /// <returns>Task representing the asynchronous writing operation</returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    [RUF(Messages.Reflection), RDC(Messages.DynamicCode)]
    public static async Task WriteAsync<[DAM(Messages.ReflectionBound)] TValue>(
        TextWriter textWriter,
        IAsyncEnumerable<TValue> values,
        CsvOptions<char>? options = null,
        int bufferSize = -1,
        bool leaveOpen = false,
        CancellationToken cancellationToken = default)
    {
        ArgumentNullException.ThrowIfNull(textWriter);
        ArgumentNullException.ThrowIfNull(values);

        await using (textWriter.ConfigureAwait(false))
        {
            cancellationToken.ThrowIfCancellationRequested();

            options ??= CsvOptions<char>.Default;
            IDematerializer<char, TValue> dematerializer = options.TypeBinder.GetDematerializer<TValue>();

            using var writer = CsvFieldWriter.Create(textWriter, options, bufferSize, leaveOpen);

            await WriteAsyncCore(
                values,
                writer,
                dematerializer,
                cancellationToken)
                .ConfigureAwait(false);
        }
    }

    /// <summary>
    /// Asynchronously writes the values as CSV records to the <see cref="Stream"/> using <see cref="CsvOptions{T}.TypeBinder"/>.
    /// </summary>
    /// <param name="stream">Stream to write the CSV to</param>
    /// <param name="values">Values to write</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="bufferSize">Buffer size to use for writing</param>
    /// <param name="leaveOpen">Whether to leave the stream open after writing</param>
    /// <param name="cancellationToken">Token to cancel the writing operation</param>
    /// <returns>Task representing the asynchronous writing operation</returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    [RUF(Messages.Reflection), RDC(Messages.DynamicCode)]
    public static async Task WriteAsync<[DAM(Messages.ReflectionBound)] TValue>(
        Stream stream,
        IAsyncEnumerable<TValue> values,
        CsvOptions<byte>? options = null,
        int bufferSize = -1,
        bool leaveOpen = false,
        CancellationToken cancellationToken = default)
    {
        FlameCsv.Extensions.Guard.CanWrite(stream);
        ArgumentNullException.ThrowIfNull(values);

        try
        {
            cancellationToken.ThrowIfCancellationRequested();
            options ??= CsvOptions<byte>.Default;
            IDematerializer<byte, TValue> dematerializer = options.TypeBinder.GetDematerializer<TValue>();

            using var writer = CsvFieldWriter.Create(stream, options, bufferSize, leaveOpen);

            await WriteAsyncCore(
                values,
                writer,
                dematerializer,
                cancellationToken)
                .ConfigureAwait(false);
        }
        finally
        {
            if (!leaveOpen) await stream.DisposeAsync().ConfigureAwait(false);
        }
    }

    /// <summary>
    /// Asynchronously writes the values as CSV records to the <see cref="PipeWriter"/> using <see cref="CsvOptions{T}.TypeBinder"/>.
    /// </summary>
    /// <param name="pipe">Pipe to write the CSV to</param>
    /// <param name="values">Values to write</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="cancellationToken">Token to cancel the writing operation</param>
    /// <returns>Task representing the asynchronous writing operation</returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    [RUF(Messages.Reflection), RDC(Messages.DynamicCode)]
    public static async Task WriteAsync<[DAM(Messages.ReflectionBound)] TValue>(
        PipeWriter pipe,
        IAsyncEnumerable<TValue> values,
        CsvOptions<byte>? options = null,
        CancellationToken cancellationToken = default)
    {
        ArgumentNullException.ThrowIfNull(pipe);
        ArgumentNullException.ThrowIfNull(values);

        if (cancellationToken.IsCancellationRequested)
        {
            OperationCanceledException exception = new(cancellationToken);
            await pipe.CompleteAsync(exception).ConfigureAwait(false);
            throw exception;
        }

        options ??= CsvOptions<byte>.Default;
        IDematerializer<byte, TValue> dematerializer = options.TypeBinder.GetDematerializer<TValue>();

        using var writer = CsvFieldWriter.Create(pipe, options);

        await WriteAsyncCore(
            values,
            writer,
            dematerializer,
            cancellationToken)
            .ConfigureAwait(false);
    }

    /// <summary>
    /// Asynchronously writes the values as CSV records to a file using <see cref="CsvOptions{T}.TypeBinder"/>.
    /// </summary>
    /// <param name="path">Path of the destination file. Existing files are overwritten</param>
    /// <param name="values">Values to write</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="cancellationToken">Token to cancel the writing operation</param>
    /// <returns>Task representing the asynchronous writing operation</returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    [RUF(Messages.Reflection), RDC(Messages.DynamicCode)]
    public static async Task WriteToFileAsync<[DAM(Messages.ReflectionBound)] TValue>(
        string path,
        IAsyncEnumerable<TValue> values,
        CsvOptions<byte>? options = null,
        CancellationToken cancellationToken = default)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(path);
        ArgumentNullException.ThrowIfNull(values);

        cancellationToken.ThrowIfCancellationRequested();

        options ??= CsvOptions<byte>.Default;
        IDematerializer<byte, TValue> dematerializer = options.TypeBinder.GetDematerializer<TValue>();

        FileStream stream = GetFileStream(path, isAsync: true);
        await using (stream.ConfigureAwait(false))
        {
            using var writer = CsvFieldWriter.Create(stream, options);

            await WriteAsyncCore(
                values,
                writer,
                dematerializer,
                cancellationToken)
                .ConfigureAwait(false);
        }
    }

    /// <summary>
    /// Asynchronously writes the values as CSV records to a file using <see cref="CsvOptions{T}.TypeBinder"/>.
    /// </summary>
    /// <param name="path">Path of the destination file. Existing files are overwritten</param>
    /// <param name="values">Values to write</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="encoding">Encoding to pass to the inner <see cref="StreamWriter"/></param>
    /// <param name="bufferSize">Buffer size to use for writing</param>
    /// <param name="cancellationToken">Token to cancel the writing operation</param>
    /// <returns>Task representing the asynchronous writing operation</returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    [OverloadResolutionPriority(-1)] // prefer byte to char when writing to file
    [RUF(Messages.Reflection), RDC(Messages.DynamicCode)]
    public static async Task WriteToFileAsync<[DAM(Messages.ReflectionBound)] TValue>(
        string path,
        IAsyncEnumerable<TValue> values,
        CsvOptions<char>? options = null,
        Encoding? encoding = null,
        int bufferSize = -1,
        CancellationToken cancellationToken = default)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(path);
        ArgumentNullException.ThrowIfNull(values);

        cancellationToken.ThrowIfCancellationRequested();

        options ??= CsvOptions<char>.Default;
        IDematerializer<char, TValue> dematerializer = options.TypeBinder.GetDematerializer<TValue>();

        if (bufferSize == -1) bufferSize = DefaultFileStreamBufferSize;

        FileStream stream = GetFileStream(path, isAsync: true, bufferSize);
        await using (stream.ConfigureAwait(false))
        {
            using var writer = CsvFieldWriter.Create(new StreamWriter(stream, encoding, bufferSize, false), options, bufferSize, leaveOpen: false);

            await WriteAsyncCore(
                values,
                writer,
                dematerializer,
                cancellationToken)
                .ConfigureAwait(false);
        }
    }

    /// <summary>
    /// Writes the values as CSV records to a string using the type map.
    /// </summary>
    /// <param name="values">Values to write</param>
    /// <param name="typeMap">Type map to use for writing</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="builder">Optional builder to write the CSV to.</param>
    /// <returns>
    /// <see cref="StringBuilder"/> containing the CSV (same instance as <paramref name="builder"/> if provided)
    /// </returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    public static StringBuilder WriteToString<TValue>(
        IEnumerable<TValue> values,
        CsvTypeMap<char, TValue> typeMap,
        CsvOptions<char>? options = null,
        StringBuilder? builder = null)
    {
        ArgumentNullException.ThrowIfNull(values);

        options ??= CsvOptions<char>.Default;
        IDematerializer<char, TValue> dematerializer = typeMap.GetDematerializer(options);

        builder ??= new();
        using var writer = CsvFieldWriter.Create(new StringWriter(builder), options, bufferSize: -1, leaveOpen: false);
        WriteCore(values, writer, dematerializer);
        return builder;
    }

    /// <summary>
    /// Writes the values as CSV records to a file using the type map.
    /// </summary>
    /// <param name="path">Path of the destination file. Existing files are overwritten</param>
    /// <param name="values">Values to write</param>
    /// <param name="typeMap">Type map to use for writing</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    public static void WriteToFile<TValue>(
        string path,
        IEnumerable<TValue> values,
        CsvTypeMap<byte, TValue> typeMap,
        CsvOptions<byte>? options = null)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(path);
        ArgumentNullException.ThrowIfNull(values);

        options ??= CsvOptions<byte>.Default;
        IDematerializer<byte, TValue> dematerializer = typeMap.GetDematerializer(options);

        using FileStream stream = GetFileStream(path, isAsync: false);

        using var writer = CsvFieldWriter.Create(stream, options);
        WriteCore(values, writer, dematerializer);
    }

    /// <summary>
    /// Writes the values as CSV records to a file using the type map.
    /// </summary>
    /// <param name="path">Path of the destination file. Existing files are overwritten</param>
    /// <param name="values">Values to write</param>
    /// <param name="typeMap">Type map to use for writing</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="encoding">Encoding to pass to the inner <see cref="StreamWriter"/></param>
    /// <param name="bufferSize">Buffer size to use for writing</param>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    [OverloadResolutionPriority(-1)] // prefer byte to char when writing to file
    public static void WriteToFile<TValue>(
        string path,
        IEnumerable<TValue> values,
        CsvTypeMap<char, TValue> typeMap,
        CsvOptions<char>? options = null,
        Encoding? encoding = null,
        int bufferSize = -1)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(path);
        ArgumentNullException.ThrowIfNull(values);

        options ??= CsvOptions<char>.Default;
        IDematerializer<char, TValue> dematerializer = typeMap.GetDematerializer(options);

        if (bufferSize == -1) bufferSize = DefaultFileStreamBufferSize;

        using FileStream stream = GetFileStream(path, isAsync: false, bufferSize);
        using var writer = CsvFieldWriter.Create(new StreamWriter(stream, encoding, bufferSize, false), options, bufferSize, leaveOpen: false);

        WriteCore(values, writer, dematerializer);
    }

    /// <summary>
    /// Writes the values as CSV records to the <see cref="TextWriter"/> using the type map.
    /// </summary>
    /// <param name="textWriter">Writer to write the CSV to</param>
    /// <param name="values">Values to write</param>
    /// <param name="typeMap">Type map to use for writing</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="bufferSize">Buffer size to use for writing</param>
    /// <param name="leaveOpen">Whether to leave the writer open after writing</param>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    public static void Write<TValue>(
        TextWriter textWriter,
        IEnumerable<TValue> values,
        CsvTypeMap<char, TValue> typeMap,
        CsvOptions<char>? options = null,
        int bufferSize = -1,
        bool leaveOpen = false)
    {
        ArgumentNullException.ThrowIfNull(textWriter);
        ArgumentNullException.ThrowIfNull(values);

        options ??= CsvOptions<char>.Default;
        IDematerializer<char, TValue> dematerializer = typeMap.GetDematerializer(options);

        using var writer = CsvFieldWriter.Create(textWriter, options, bufferSize, leaveOpen);
        WriteCore(values, writer, dematerializer);
    }

    /// <summary>
    /// Writes the values as CSV records to the <see cref="Stream"/> using the type map.
    /// </summary>
    /// <param name="stream">Stream to write the CSV to</param>
    /// <param name="values">Values to write</param>
    /// <param name="typeMap">Type map to use for writing</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="bufferSize">Buffer size to use for writing</param>
    /// <param name="leaveOpen">Whether to leave the stream open after writing</param>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    public static void Write<TValue>(
        Stream stream,
        IEnumerable<TValue> values,
        CsvTypeMap<byte, TValue> typeMap,
        CsvOptions<byte>? options = null,
        int bufferSize = -1,
        bool leaveOpen = false)
    {
        FlameCsv.Extensions.Guard.CanWrite(stream);
        ArgumentNullException.ThrowIfNull(values);

        options ??= CsvOptions<byte>.Default;
        IDematerializer<byte, TValue> dematerializer = typeMap.GetDematerializer(options);

        using var writer = CsvFieldWriter.Create(stream, options, bufferSize, leaveOpen);
        WriteCore(values, writer, dematerializer);
    }

    /// <summary>
    /// Asynchronously writes the values as CSV records to the <see cref="TextWriter"/> using the type map.
    /// </summary>
    /// <param name="textWriter">Writer to write the CSV to</param>
    /// <param name="values">Values to write</param>
    /// <param name="typeMap">Type map to use for writing</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="bufferSize">Buffer size to use for writing</param>
    /// <param name="leaveOpen">Whether to leave the writer open after writing</param>
    /// <param name="cancellationToken">Token to cancel the writing operation</param>
    /// <returns>Task representing the asynchronous writing operation</returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    public static async Task WriteAsync<TValue>(
        TextWriter textWriter,
        IEnumerable<TValue> values,
        CsvTypeMap<char, TValue> typeMap,
        CsvOptions<char>? options = null,
        int bufferSize = -1,
        bool leaveOpen = false,
        CancellationToken cancellationToken = default)
    {
        ArgumentNullException.ThrowIfNull(textWriter);
        ArgumentNullException.ThrowIfNull(values);

        await using (textWriter.ConfigureAwait(false))
        {
            cancellationToken.ThrowIfCancellationRequested();

            options ??= CsvOptions<char>.Default;
            IDematerializer<char, TValue> dematerializer = typeMap.GetDematerializer(options);

            using var writer = CsvFieldWriter.Create(textWriter, options, bufferSize, leaveOpen);

            await WriteAsyncCore(
                values,
                writer,
                dematerializer,
                cancellationToken)
                .ConfigureAwait(false);
        }
    }

    /// <summary>
    /// Asynchronously writes the values as CSV records to the <see cref="Stream"/> using the type map.
    /// </summary>
    /// <param name="stream">Stream to write the CSV to</param>
    /// <param name="values">Values to write</param>
    /// <param name="typeMap">Type map to use for writing</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="bufferSize">Buffer size to use for writing</param>
    /// <param name="leaveOpen">Whether to leave the stream open after writing</param>
    /// <param name="cancellationToken">Token to cancel the writing operation</param>
    /// <returns>Task representing the asynchronous writing operation</returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    public static async Task WriteAsync<TValue>(
        Stream stream,
        IEnumerable<TValue> values,
        CsvTypeMap<byte, TValue> typeMap,
        CsvOptions<byte>? options = null,
        int bufferSize = -1,
        bool leaveOpen = false,
        CancellationToken cancellationToken = default)
    {
        FlameCsv.Extensions.Guard.CanWrite(stream);
        ArgumentNullException.ThrowIfNull(values);

        try
        {
            cancellationToken.ThrowIfCancellationRequested();
            options ??= CsvOptions<byte>.Default;
            IDematerializer<byte, TValue> dematerializer = typeMap.GetDematerializer(options);

            using var writer = CsvFieldWriter.Create(stream, options, bufferSize, leaveOpen);

            await WriteAsyncCore(
                values,
                writer,
                dematerializer,
                cancellationToken)
                .ConfigureAwait(false);
        }
        finally
        {
            if (!leaveOpen) await stream.DisposeAsync().ConfigureAwait(false);
        }
    }

    /// <summary>
    /// Asynchronously writes the values as CSV records to the <see cref="PipeWriter"/> using the type map.
    /// </summary>
    /// <param name="pipe">Pipe to write the CSV to</param>
    /// <param name="values">Values to write</param>
    /// <param name="typeMap">Type map to use for writing</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="cancellationToken">Token to cancel the writing operation</param>
    /// <returns>Task representing the asynchronous writing operation</returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    public static async Task WriteAsync<TValue>(
        PipeWriter pipe,
        IEnumerable<TValue> values,
        CsvTypeMap<byte, TValue> typeMap,
        CsvOptions<byte>? options = null,
        CancellationToken cancellationToken = default)
    {
        ArgumentNullException.ThrowIfNull(pipe);
        ArgumentNullException.ThrowIfNull(values);

        if (cancellationToken.IsCancellationRequested)
        {
            OperationCanceledException exception = new(cancellationToken);
            await pipe.CompleteAsync(exception).ConfigureAwait(false);
            throw exception;
        }

        options ??= CsvOptions<byte>.Default;
        IDematerializer<byte, TValue> dematerializer = typeMap.GetDematerializer(options);

        using var writer = CsvFieldWriter.Create(pipe, options);

        await WriteAsyncCore(
            values,
            writer,
            dematerializer,
            cancellationToken)
            .ConfigureAwait(false);
    }

    /// <summary>
    /// Asynchronously writes the values as CSV records to a file using the type map.
    /// </summary>
    /// <param name="path">Path of the destination file. Existing files are overwritten</param>
    /// <param name="values">Values to write</param>
    /// <param name="typeMap">Type map to use for writing</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="cancellationToken">Token to cancel the writing operation</param>
    /// <returns>Task representing the asynchronous writing operation</returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    public static async Task WriteToFileAsync<TValue>(
        string path,
        IEnumerable<TValue> values,
        CsvTypeMap<byte, TValue> typeMap,
        CsvOptions<byte>? options = null,
        CancellationToken cancellationToken = default)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(path);
        ArgumentNullException.ThrowIfNull(values);

        cancellationToken.ThrowIfCancellationRequested();

        options ??= CsvOptions<byte>.Default;
        IDematerializer<byte, TValue> dematerializer = typeMap.GetDematerializer(options);

        FileStream stream = GetFileStream(path, isAsync: true);
        await using (stream.ConfigureAwait(false))
        {
            using var writer = CsvFieldWriter.Create(stream, options);

            await WriteAsyncCore(
                values,
                writer,
                dematerializer,
                cancellationToken)
                .ConfigureAwait(false);
        }
    }

    /// <summary>
    /// Asynchronously writes the values as CSV records to a file using the type map.
    /// </summary>
    /// <param name="path">Path of the destination file. Existing files are overwritten</param>
    /// <param name="values">Values to write</param>
    /// <param name="typeMap">Type map to use for writing</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="encoding">Encoding to pass to the inner <see cref="StreamWriter"/></param>
    /// <param name="bufferSize">Buffer size to use for writing</param>
    /// <param name="cancellationToken">Token to cancel the writing operation</param>
    /// <returns>Task representing the asynchronous writing operation</returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    [OverloadResolutionPriority(-1)] // prefer byte to char when writing to file
    public static async Task WriteToFileAsync<TValue>(
        string path,
        IEnumerable<TValue> values,
        CsvTypeMap<char, TValue> typeMap,
        CsvOptions<char>? options = null,
        Encoding? encoding = null,
        int bufferSize = -1,
        CancellationToken cancellationToken = default)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(path);
        ArgumentNullException.ThrowIfNull(values);

        cancellationToken.ThrowIfCancellationRequested();

        options ??= CsvOptions<char>.Default;
        IDematerializer<char, TValue> dematerializer = typeMap.GetDematerializer(options);

        if (bufferSize == -1) bufferSize = DefaultFileStreamBufferSize;

        FileStream stream = GetFileStream(path, isAsync: true, bufferSize);
        await using (stream.ConfigureAwait(false))
        {
            using var writer = CsvFieldWriter.Create(new StreamWriter(stream, encoding, bufferSize, false), options, bufferSize, leaveOpen: false);

            await WriteAsyncCore(
                values,
                writer,
                dematerializer,
                cancellationToken)
                .ConfigureAwait(false);
        }
    }

    /// <summary>
    /// Asynchronously writes the values as CSV records to the <see cref="TextWriter"/> using the type map.
    /// </summary>
    /// <param name="textWriter">Writer to write the CSV to</param>
    /// <param name="values">Values to write</param>
    /// <param name="typeMap">Type map to use for writing</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="bufferSize">Buffer size to use for writing</param>
    /// <param name="leaveOpen">Whether to leave the writer open after writing</param>
    /// <param name="cancellationToken">Token to cancel the writing operation</param>
    /// <returns>Task representing the asynchronous writing operation</returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    public static async Task WriteAsync<TValue>(
        TextWriter textWriter,
        IAsyncEnumerable<TValue> values,
        CsvTypeMap<char, TValue> typeMap,
        CsvOptions<char>? options = null,
        int bufferSize = -1,
        bool leaveOpen = false,
        CancellationToken cancellationToken = default)
    {
        ArgumentNullException.ThrowIfNull(textWriter);
        ArgumentNullException.ThrowIfNull(values);

        await using (textWriter.ConfigureAwait(false))
        {
            cancellationToken.ThrowIfCancellationRequested();

            options ??= CsvOptions<char>.Default;
            IDematerializer<char, TValue> dematerializer = typeMap.GetDematerializer(options);

            using var writer = CsvFieldWriter.Create(textWriter, options, bufferSize, leaveOpen);

            await WriteAsyncCore(
                values,
                writer,
                dematerializer,
                cancellationToken)
                .ConfigureAwait(false);
        }
    }

    /// <summary>
    /// Asynchronously writes the values as CSV records to the <see cref="Stream"/> using the type map.
    /// </summary>
    /// <param name="stream">Stream to write the CSV to</param>
    /// <param name="values">Values to write</param>
    /// <param name="typeMap">Type map to use for writing</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="bufferSize">Buffer size to use for writing</param>
    /// <param name="leaveOpen">Whether to leave the stream open after writing</param>
    /// <param name="cancellationToken">Token to cancel the writing operation</param>
    /// <returns>Task representing the asynchronous writing operation</returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    public static async Task WriteAsync<TValue>(
        Stream stream,
        IAsyncEnumerable<TValue> values,
        CsvTypeMap<byte, TValue> typeMap,
        CsvOptions<byte>? options = null,
        int bufferSize = -1,
        bool leaveOpen = false,
        CancellationToken cancellationToken = default)
    {
        FlameCsv.Extensions.Guard.CanWrite(stream);
        ArgumentNullException.ThrowIfNull(values);

        try
        {
            cancellationToken.ThrowIfCancellationRequested();
            options ??= CsvOptions<byte>.Default;
            IDematerializer<byte, TValue> dematerializer = typeMap.GetDematerializer(options);

            using var writer = CsvFieldWriter.Create(stream, options, bufferSize, leaveOpen);

            await WriteAsyncCore(
                values,
                writer,
                dematerializer,
                cancellationToken)
                .ConfigureAwait(false);
        }
        finally
        {
            if (!leaveOpen) await stream.DisposeAsync().ConfigureAwait(false);
        }
    }

    /// <summary>
    /// Asynchronously writes the values as CSV records to the <see cref="PipeWriter"/> using the type map.
    /// </summary>
    /// <param name="pipe">Pipe to write the CSV to</param>
    /// <param name="values">Values to write</param>
    /// <param name="typeMap">Type map to use for writing</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="cancellationToken">Token to cancel the writing operation</param>
    /// <returns>Task representing the asynchronous writing operation</returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    public static async Task WriteAsync<TValue>(
        PipeWriter pipe,
        IAsyncEnumerable<TValue> values,
        CsvTypeMap<byte, TValue> typeMap,
        CsvOptions<byte>? options = null,
        CancellationToken cancellationToken = default)
    {
        ArgumentNullException.ThrowIfNull(pipe);
        ArgumentNullException.ThrowIfNull(values);

        if (cancellationToken.IsCancellationRequested)
        {
            OperationCanceledException exception = new(cancellationToken);
            await pipe.CompleteAsync(exception).ConfigureAwait(false);
            throw exception;
        }

        options ??= CsvOptions<byte>.Default;
        IDematerializer<byte, TValue> dematerializer = typeMap.GetDematerializer(options);

        using var writer = CsvFieldWriter.Create(pipe, options);

        await WriteAsyncCore(
            values,
            writer,
            dematerializer,
            cancellationToken)
            .ConfigureAwait(false);
    }

    /// <summary>
    /// Asynchronously writes the values as CSV records to a file using the type map.
    /// </summary>
    /// <param name="path">Path of the destination file. Existing files are overwritten</param>
    /// <param name="values">Values to write</param>
    /// <param name="typeMap">Type map to use for writing</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="cancellationToken">Token to cancel the writing operation</param>
    /// <returns>Task representing the asynchronous writing operation</returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    public static async Task WriteToFileAsync<TValue>(
        string path,
        IAsyncEnumerable<TValue> values,
        CsvTypeMap<byte, TValue> typeMap,
        CsvOptions<byte>? options = null,
        CancellationToken cancellationToken = default)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(path);
        ArgumentNullException.ThrowIfNull(values);

        cancellationToken.ThrowIfCancellationRequested();

        options ??= CsvOptions<byte>.Default;
        IDematerializer<byte, TValue> dematerializer = typeMap.GetDematerializer(options);

        FileStream stream = GetFileStream(path, isAsync: true);
        await using (stream.ConfigureAwait(false))
        {
            using var writer = CsvFieldWriter.Create(stream, options);

            await WriteAsyncCore(
                values,
                writer,
                dematerializer,
                cancellationToken)
                .ConfigureAwait(false);
        }
    }

    /// <summary>
    /// Asynchronously writes the values as CSV records to a file using the type map.
    /// </summary>
    /// <param name="path">Path of the destination file. Existing files are overwritten</param>
    /// <param name="values">Values to write</param>
    /// <param name="typeMap">Type map to use for writing</param>
    /// <param name="options">Options to use, <see cref="CsvOptions{T}.Default"/> used by default</param>
    /// <param name="encoding">Encoding to pass to the inner <see cref="StreamWriter"/></param>
    /// <param name="bufferSize">Buffer size to use for writing</param>
    /// <param name="cancellationToken">Token to cancel the writing operation</param>
    /// <returns>Task representing the asynchronous writing operation</returns>
    /// <remarks>
    /// Data is written even if <paramref name="values"/> empty,
    /// either just the header or an empty line if <see cref="CsvOptions{T}.HasHeader"/> is <see langword="false"/>.
    /// </remarks>
    [OverloadResolutionPriority(-1)] // prefer byte to char when writing to file
    public static async Task WriteToFileAsync<TValue>(
        string path,
        IAsyncEnumerable<TValue> values,
        CsvTypeMap<char, TValue> typeMap,
        CsvOptions<char>? options = null,
        Encoding? encoding = null,
        int bufferSize = -1,
        CancellationToken cancellationToken = default)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(path);
        ArgumentNullException.ThrowIfNull(values);

        cancellationToken.ThrowIfCancellationRequested();

        options ??= CsvOptions<char>.Default;
        IDematerializer<char, TValue> dematerializer = typeMap.GetDematerializer(options);

        if (bufferSize == -1) bufferSize = DefaultFileStreamBufferSize;

        FileStream stream = GetFileStream(path, isAsync: true, bufferSize);
        await using (stream.ConfigureAwait(false))
        {
            using var writer = CsvFieldWriter.Create(new StreamWriter(stream, encoding, bufferSize, false), options, bufferSize, leaveOpen: false);

            await WriteAsyncCore(
                values,
                writer,
                dematerializer,
                cancellationToken)
                .ConfigureAwait(false);
        }
    }

}

// <auto-generated />
using System.Linq.Expressions;
using System.Reflection;
using CommunityToolkit.Diagnostics;
using FastExpressionCompiler;

namespace FlameCsv.Runtime;

internal static partial class ReflectionUtil
{
    internal static readonly Dictionary<int, MethodInfo> InitializerFactories =
        Enumerable.Range(1, 16).ToDictionary(
            static count => count,
            static count =>
            {
                Delegate initializer = count switch
                {
                    1 => (CreateInitializer<object, object>),
                    2 => (CreateInitializer<object, object, object>),
                    3 => (CreateInitializer<object, object, object, object>),
                    4 => (CreateInitializer<object, object, object, object, object>),
                    5 => (CreateInitializer<object, object, object, object, object, object>),
                    6 => (CreateInitializer<object, object, object, object, object, object, object>),
                    7 => (CreateInitializer<object, object, object, object, object, object, object, object>),
                    8 => (CreateInitializer<object, object, object, object, object, object, object, object, object>),
                    9 => (CreateInitializer<object, object, object, object, object, object, object, object, object, object>),
                    10 => (CreateInitializer<object, object, object, object, object, object, object, object, object, object, object>),
                    11 => (CreateInitializer<object, object, object, object, object, object, object, object, object, object, object, object>),
                    12 => (CreateInitializer<object, object, object, object, object, object, object, object, object, object, object, object, object>),
                    13 => (CreateInitializer<object, object, object, object, object, object, object, object, object, object, object, object, object, object>),
                    14 => (CreateInitializer<object, object, object, object, object, object, object, object, object, object, object, object, object, object, object>),
                    15 => (CreateInitializer<object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object>),
                    16 => (CreateInitializer<object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object>),
                    _ => ThrowHelper.ThrowArgumentOutOfRangeException<Delegate>(nameof(count), count, null),
                };

                return initializer.Method.GetGenericMethodDefinition();
            });

    public static Func<TValue1, T> CreateInitializer<TValue1, T>(
        MemberInfo member1)
    {
        var value1 = Expression.Parameter(typeof(TValue1), "value1");
        var init = Expression.MemberInit(
            Expression.New(typeof(T)),
            Expression.Bind(member1, value1));
        var lambda = Expression.Lambda(init, value1);
        return lambda.TryCompileWithoutClosure<Func<TValue1, T>>(flags: DefaultCompilerFlags)
            ?? lambda.CompileFast<Func<TValue1, T>>(flags: DefaultCompilerFlags);
    }

    public static Func<TValue1, TValue2, T> CreateInitializer<TValue1, TValue2, T>(
        MemberInfo member1,
        MemberInfo member2)
    {
        var value1 = Expression.Parameter(typeof(TValue1), "value1");
        var value2 = Expression.Parameter(typeof(TValue2), "value2");
        var init = Expression.MemberInit(
            Expression.New(typeof(T)),
            Expression.Bind(member1, value1),
            Expression.Bind(member2, value2));
        var lambda = Expression.Lambda(init, value1, value2);
        return lambda.TryCompileWithoutClosure<Func<TValue1, TValue2, T>>(flags: DefaultCompilerFlags)
            ?? lambda.CompileFast<Func<TValue1, TValue2, T>>(flags: DefaultCompilerFlags);
    }

    public static Func<TValue1, TValue2, TValue3, T> CreateInitializer<TValue1, TValue2, TValue3, T>(
        MemberInfo member1,
        MemberInfo member2,
        MemberInfo member3)
    {
        var value1 = Expression.Parameter(typeof(TValue1), "value1");
        var value2 = Expression.Parameter(typeof(TValue2), "value2");
        var value3 = Expression.Parameter(typeof(TValue3), "value3");
        var init = Expression.MemberInit(
            Expression.New(typeof(T)),
            Expression.Bind(member1, value1),
            Expression.Bind(member2, value2),
            Expression.Bind(member3, value3));
        var lambda = Expression.Lambda(init, value1, value2, value3);
        return lambda.TryCompileWithoutClosure<Func<TValue1, TValue2, TValue3, T>>(flags: DefaultCompilerFlags)
            ?? lambda.CompileFast<Func<TValue1, TValue2, TValue3, T>>(flags: DefaultCompilerFlags);
    }

    public static Func<TValue1, TValue2, TValue3, TValue4, T> CreateInitializer<TValue1, TValue2, TValue3, TValue4, T>(
        MemberInfo member1,
        MemberInfo member2,
        MemberInfo member3,
        MemberInfo member4)
    {
        var value1 = Expression.Parameter(typeof(TValue1), "value1");
        var value2 = Expression.Parameter(typeof(TValue2), "value2");
        var value3 = Expression.Parameter(typeof(TValue3), "value3");
        var value4 = Expression.Parameter(typeof(TValue4), "value4");
        var init = Expression.MemberInit(
            Expression.New(typeof(T)),
            Expression.Bind(member1, value1),
            Expression.Bind(member2, value2),
            Expression.Bind(member3, value3),
            Expression.Bind(member4, value4));
        var lambda = Expression.Lambda(init, value1, value2, value3, value4);
        return lambda.TryCompileWithoutClosure<Func<TValue1, TValue2, TValue3, TValue4, T>>(flags: DefaultCompilerFlags)
            ?? lambda.CompileFast<Func<TValue1, TValue2, TValue3, TValue4, T>>(flags: DefaultCompilerFlags);
    }

    public static Func<TValue1, TValue2, TValue3, TValue4, TValue5, T> CreateInitializer<TValue1, TValue2, TValue3, TValue4, TValue5, T>(
        MemberInfo member1,
        MemberInfo member2,
        MemberInfo member3,
        MemberInfo member4,
        MemberInfo member5)
    {
        var value1 = Expression.Parameter(typeof(TValue1), "value1");
        var value2 = Expression.Parameter(typeof(TValue2), "value2");
        var value3 = Expression.Parameter(typeof(TValue3), "value3");
        var value4 = Expression.Parameter(typeof(TValue4), "value4");
        var value5 = Expression.Parameter(typeof(TValue5), "value5");
        var init = Expression.MemberInit(
            Expression.New(typeof(T)),
            Expression.Bind(member1, value1),
            Expression.Bind(member2, value2),
            Expression.Bind(member3, value3),
            Expression.Bind(member4, value4),
            Expression.Bind(member5, value5));
        var lambda = Expression.Lambda(init, value1, value2, value3, value4, value5);
        return lambda.TryCompileWithoutClosure<Func<TValue1, TValue2, TValue3, TValue4, TValue5, T>>(flags: DefaultCompilerFlags)
            ?? lambda.CompileFast<Func<TValue1, TValue2, TValue3, TValue4, TValue5, T>>(flags: DefaultCompilerFlags);
    }

    public static Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, T> CreateInitializer<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, T>(
        MemberInfo member1,
        MemberInfo member2,
        MemberInfo member3,
        MemberInfo member4,
        MemberInfo member5,
        MemberInfo member6)
    {
        var value1 = Expression.Parameter(typeof(TValue1), "value1");
        var value2 = Expression.Parameter(typeof(TValue2), "value2");
        var value3 = Expression.Parameter(typeof(TValue3), "value3");
        var value4 = Expression.Parameter(typeof(TValue4), "value4");
        var value5 = Expression.Parameter(typeof(TValue5), "value5");
        var value6 = Expression.Parameter(typeof(TValue6), "value6");
        var init = Expression.MemberInit(
            Expression.New(typeof(T)),
            Expression.Bind(member1, value1),
            Expression.Bind(member2, value2),
            Expression.Bind(member3, value3),
            Expression.Bind(member4, value4),
            Expression.Bind(member5, value5),
            Expression.Bind(member6, value6));
        var lambda = Expression.Lambda(init, value1, value2, value3, value4, value5, value6);
        return lambda.TryCompileWithoutClosure<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, T>>(flags: DefaultCompilerFlags)
            ?? lambda.CompileFast<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, T>>(flags: DefaultCompilerFlags);
    }

    public static Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, T> CreateInitializer<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, T>(
        MemberInfo member1,
        MemberInfo member2,
        MemberInfo member3,
        MemberInfo member4,
        MemberInfo member5,
        MemberInfo member6,
        MemberInfo member7)
    {
        var value1 = Expression.Parameter(typeof(TValue1), "value1");
        var value2 = Expression.Parameter(typeof(TValue2), "value2");
        var value3 = Expression.Parameter(typeof(TValue3), "value3");
        var value4 = Expression.Parameter(typeof(TValue4), "value4");
        var value5 = Expression.Parameter(typeof(TValue5), "value5");
        var value6 = Expression.Parameter(typeof(TValue6), "value6");
        var value7 = Expression.Parameter(typeof(TValue7), "value7");
        var init = Expression.MemberInit(
            Expression.New(typeof(T)),
            Expression.Bind(member1, value1),
            Expression.Bind(member2, value2),
            Expression.Bind(member3, value3),
            Expression.Bind(member4, value4),
            Expression.Bind(member5, value5),
            Expression.Bind(member6, value6),
            Expression.Bind(member7, value7));
        var lambda = Expression.Lambda(init, value1, value2, value3, value4, value5, value6, value7);
        return lambda.TryCompileWithoutClosure<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, T>>(flags: DefaultCompilerFlags)
            ?? lambda.CompileFast<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, T>>(flags: DefaultCompilerFlags);
    }

    public static Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, T> CreateInitializer<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, T>(
        MemberInfo member1,
        MemberInfo member2,
        MemberInfo member3,
        MemberInfo member4,
        MemberInfo member5,
        MemberInfo member6,
        MemberInfo member7,
        MemberInfo member8)
    {
        var value1 = Expression.Parameter(typeof(TValue1), "value1");
        var value2 = Expression.Parameter(typeof(TValue2), "value2");
        var value3 = Expression.Parameter(typeof(TValue3), "value3");
        var value4 = Expression.Parameter(typeof(TValue4), "value4");
        var value5 = Expression.Parameter(typeof(TValue5), "value5");
        var value6 = Expression.Parameter(typeof(TValue6), "value6");
        var value7 = Expression.Parameter(typeof(TValue7), "value7");
        var value8 = Expression.Parameter(typeof(TValue8), "value8");
        var init = Expression.MemberInit(
            Expression.New(typeof(T)),
            Expression.Bind(member1, value1),
            Expression.Bind(member2, value2),
            Expression.Bind(member3, value3),
            Expression.Bind(member4, value4),
            Expression.Bind(member5, value5),
            Expression.Bind(member6, value6),
            Expression.Bind(member7, value7),
            Expression.Bind(member8, value8));
        var lambda = Expression.Lambda(init, value1, value2, value3, value4, value5, value6, value7, value8);
        return lambda.TryCompileWithoutClosure<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, T>>(flags: DefaultCompilerFlags)
            ?? lambda.CompileFast<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, T>>(flags: DefaultCompilerFlags);
    }

    public static Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, T> CreateInitializer<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, T>(
        MemberInfo member1,
        MemberInfo member2,
        MemberInfo member3,
        MemberInfo member4,
        MemberInfo member5,
        MemberInfo member6,
        MemberInfo member7,
        MemberInfo member8,
        MemberInfo member9)
    {
        var value1 = Expression.Parameter(typeof(TValue1), "value1");
        var value2 = Expression.Parameter(typeof(TValue2), "value2");
        var value3 = Expression.Parameter(typeof(TValue3), "value3");
        var value4 = Expression.Parameter(typeof(TValue4), "value4");
        var value5 = Expression.Parameter(typeof(TValue5), "value5");
        var value6 = Expression.Parameter(typeof(TValue6), "value6");
        var value7 = Expression.Parameter(typeof(TValue7), "value7");
        var value8 = Expression.Parameter(typeof(TValue8), "value8");
        var value9 = Expression.Parameter(typeof(TValue9), "value9");
        var init = Expression.MemberInit(
            Expression.New(typeof(T)),
            Expression.Bind(member1, value1),
            Expression.Bind(member2, value2),
            Expression.Bind(member3, value3),
            Expression.Bind(member4, value4),
            Expression.Bind(member5, value5),
            Expression.Bind(member6, value6),
            Expression.Bind(member7, value7),
            Expression.Bind(member8, value8),
            Expression.Bind(member9, value9));
        var lambda = Expression.Lambda(init, value1, value2, value3, value4, value5, value6, value7, value8, value9);
        return lambda.TryCompileWithoutClosure<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, T>>(flags: DefaultCompilerFlags)
            ?? lambda.CompileFast<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, T>>(flags: DefaultCompilerFlags);
    }

    public static Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, T> CreateInitializer<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, T>(
        MemberInfo member1,
        MemberInfo member2,
        MemberInfo member3,
        MemberInfo member4,
        MemberInfo member5,
        MemberInfo member6,
        MemberInfo member7,
        MemberInfo member8,
        MemberInfo member9,
        MemberInfo member10)
    {
        var value1 = Expression.Parameter(typeof(TValue1), "value1");
        var value2 = Expression.Parameter(typeof(TValue2), "value2");
        var value3 = Expression.Parameter(typeof(TValue3), "value3");
        var value4 = Expression.Parameter(typeof(TValue4), "value4");
        var value5 = Expression.Parameter(typeof(TValue5), "value5");
        var value6 = Expression.Parameter(typeof(TValue6), "value6");
        var value7 = Expression.Parameter(typeof(TValue7), "value7");
        var value8 = Expression.Parameter(typeof(TValue8), "value8");
        var value9 = Expression.Parameter(typeof(TValue9), "value9");
        var value10 = Expression.Parameter(typeof(TValue10), "value10");
        var init = Expression.MemberInit(
            Expression.New(typeof(T)),
            Expression.Bind(member1, value1),
            Expression.Bind(member2, value2),
            Expression.Bind(member3, value3),
            Expression.Bind(member4, value4),
            Expression.Bind(member5, value5),
            Expression.Bind(member6, value6),
            Expression.Bind(member7, value7),
            Expression.Bind(member8, value8),
            Expression.Bind(member9, value9),
            Expression.Bind(member10, value10));
        var lambda = Expression.Lambda(init, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10);
        return lambda.TryCompileWithoutClosure<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, T>>(flags: DefaultCompilerFlags)
            ?? lambda.CompileFast<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, T>>(flags: DefaultCompilerFlags);
    }

    public static Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, T> CreateInitializer<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, T>(
        MemberInfo member1,
        MemberInfo member2,
        MemberInfo member3,
        MemberInfo member4,
        MemberInfo member5,
        MemberInfo member6,
        MemberInfo member7,
        MemberInfo member8,
        MemberInfo member9,
        MemberInfo member10,
        MemberInfo member11)
    {
        var value1 = Expression.Parameter(typeof(TValue1), "value1");
        var value2 = Expression.Parameter(typeof(TValue2), "value2");
        var value3 = Expression.Parameter(typeof(TValue3), "value3");
        var value4 = Expression.Parameter(typeof(TValue4), "value4");
        var value5 = Expression.Parameter(typeof(TValue5), "value5");
        var value6 = Expression.Parameter(typeof(TValue6), "value6");
        var value7 = Expression.Parameter(typeof(TValue7), "value7");
        var value8 = Expression.Parameter(typeof(TValue8), "value8");
        var value9 = Expression.Parameter(typeof(TValue9), "value9");
        var value10 = Expression.Parameter(typeof(TValue10), "value10");
        var value11 = Expression.Parameter(typeof(TValue11), "value11");
        var init = Expression.MemberInit(
            Expression.New(typeof(T)),
            Expression.Bind(member1, value1),
            Expression.Bind(member2, value2),
            Expression.Bind(member3, value3),
            Expression.Bind(member4, value4),
            Expression.Bind(member5, value5),
            Expression.Bind(member6, value6),
            Expression.Bind(member7, value7),
            Expression.Bind(member8, value8),
            Expression.Bind(member9, value9),
            Expression.Bind(member10, value10),
            Expression.Bind(member11, value11));
        var lambda = Expression.Lambda(init, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11);
        return lambda.TryCompileWithoutClosure<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, T>>(flags: DefaultCompilerFlags)
            ?? lambda.CompileFast<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, T>>(flags: DefaultCompilerFlags);
    }

    public static Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, TValue12, T> CreateInitializer<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, TValue12, T>(
        MemberInfo member1,
        MemberInfo member2,
        MemberInfo member3,
        MemberInfo member4,
        MemberInfo member5,
        MemberInfo member6,
        MemberInfo member7,
        MemberInfo member8,
        MemberInfo member9,
        MemberInfo member10,
        MemberInfo member11,
        MemberInfo member12)
    {
        var value1 = Expression.Parameter(typeof(TValue1), "value1");
        var value2 = Expression.Parameter(typeof(TValue2), "value2");
        var value3 = Expression.Parameter(typeof(TValue3), "value3");
        var value4 = Expression.Parameter(typeof(TValue4), "value4");
        var value5 = Expression.Parameter(typeof(TValue5), "value5");
        var value6 = Expression.Parameter(typeof(TValue6), "value6");
        var value7 = Expression.Parameter(typeof(TValue7), "value7");
        var value8 = Expression.Parameter(typeof(TValue8), "value8");
        var value9 = Expression.Parameter(typeof(TValue9), "value9");
        var value10 = Expression.Parameter(typeof(TValue10), "value10");
        var value11 = Expression.Parameter(typeof(TValue11), "value11");
        var value12 = Expression.Parameter(typeof(TValue12), "value12");
        var init = Expression.MemberInit(
            Expression.New(typeof(T)),
            Expression.Bind(member1, value1),
            Expression.Bind(member2, value2),
            Expression.Bind(member3, value3),
            Expression.Bind(member4, value4),
            Expression.Bind(member5, value5),
            Expression.Bind(member6, value6),
            Expression.Bind(member7, value7),
            Expression.Bind(member8, value8),
            Expression.Bind(member9, value9),
            Expression.Bind(member10, value10),
            Expression.Bind(member11, value11),
            Expression.Bind(member12, value12));
        var lambda = Expression.Lambda(init, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12);
        return lambda.TryCompileWithoutClosure<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, TValue12, T>>(flags: DefaultCompilerFlags)
            ?? lambda.CompileFast<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, TValue12, T>>(flags: DefaultCompilerFlags);
    }

    public static Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, TValue12, TValue13, T> CreateInitializer<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, TValue12, TValue13, T>(
        MemberInfo member1,
        MemberInfo member2,
        MemberInfo member3,
        MemberInfo member4,
        MemberInfo member5,
        MemberInfo member6,
        MemberInfo member7,
        MemberInfo member8,
        MemberInfo member9,
        MemberInfo member10,
        MemberInfo member11,
        MemberInfo member12,
        MemberInfo member13)
    {
        var value1 = Expression.Parameter(typeof(TValue1), "value1");
        var value2 = Expression.Parameter(typeof(TValue2), "value2");
        var value3 = Expression.Parameter(typeof(TValue3), "value3");
        var value4 = Expression.Parameter(typeof(TValue4), "value4");
        var value5 = Expression.Parameter(typeof(TValue5), "value5");
        var value6 = Expression.Parameter(typeof(TValue6), "value6");
        var value7 = Expression.Parameter(typeof(TValue7), "value7");
        var value8 = Expression.Parameter(typeof(TValue8), "value8");
        var value9 = Expression.Parameter(typeof(TValue9), "value9");
        var value10 = Expression.Parameter(typeof(TValue10), "value10");
        var value11 = Expression.Parameter(typeof(TValue11), "value11");
        var value12 = Expression.Parameter(typeof(TValue12), "value12");
        var value13 = Expression.Parameter(typeof(TValue13), "value13");
        var init = Expression.MemberInit(
            Expression.New(typeof(T)),
            Expression.Bind(member1, value1),
            Expression.Bind(member2, value2),
            Expression.Bind(member3, value3),
            Expression.Bind(member4, value4),
            Expression.Bind(member5, value5),
            Expression.Bind(member6, value6),
            Expression.Bind(member7, value7),
            Expression.Bind(member8, value8),
            Expression.Bind(member9, value9),
            Expression.Bind(member10, value10),
            Expression.Bind(member11, value11),
            Expression.Bind(member12, value12),
            Expression.Bind(member13, value13));
        var lambda = Expression.Lambda(init, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13);
        return lambda.TryCompileWithoutClosure<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, TValue12, TValue13, T>>(flags: DefaultCompilerFlags)
            ?? lambda.CompileFast<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, TValue12, TValue13, T>>(flags: DefaultCompilerFlags);
    }

    public static Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, TValue12, TValue13, TValue14, T> CreateInitializer<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, TValue12, TValue13, TValue14, T>(
        MemberInfo member1,
        MemberInfo member2,
        MemberInfo member3,
        MemberInfo member4,
        MemberInfo member5,
        MemberInfo member6,
        MemberInfo member7,
        MemberInfo member8,
        MemberInfo member9,
        MemberInfo member10,
        MemberInfo member11,
        MemberInfo member12,
        MemberInfo member13,
        MemberInfo member14)
    {
        var value1 = Expression.Parameter(typeof(TValue1), "value1");
        var value2 = Expression.Parameter(typeof(TValue2), "value2");
        var value3 = Expression.Parameter(typeof(TValue3), "value3");
        var value4 = Expression.Parameter(typeof(TValue4), "value4");
        var value5 = Expression.Parameter(typeof(TValue5), "value5");
        var value6 = Expression.Parameter(typeof(TValue6), "value6");
        var value7 = Expression.Parameter(typeof(TValue7), "value7");
        var value8 = Expression.Parameter(typeof(TValue8), "value8");
        var value9 = Expression.Parameter(typeof(TValue9), "value9");
        var value10 = Expression.Parameter(typeof(TValue10), "value10");
        var value11 = Expression.Parameter(typeof(TValue11), "value11");
        var value12 = Expression.Parameter(typeof(TValue12), "value12");
        var value13 = Expression.Parameter(typeof(TValue13), "value13");
        var value14 = Expression.Parameter(typeof(TValue14), "value14");
        var init = Expression.MemberInit(
            Expression.New(typeof(T)),
            Expression.Bind(member1, value1),
            Expression.Bind(member2, value2),
            Expression.Bind(member3, value3),
            Expression.Bind(member4, value4),
            Expression.Bind(member5, value5),
            Expression.Bind(member6, value6),
            Expression.Bind(member7, value7),
            Expression.Bind(member8, value8),
            Expression.Bind(member9, value9),
            Expression.Bind(member10, value10),
            Expression.Bind(member11, value11),
            Expression.Bind(member12, value12),
            Expression.Bind(member13, value13),
            Expression.Bind(member14, value14));
        var lambda = Expression.Lambda(init, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14);
        return lambda.TryCompileWithoutClosure<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, TValue12, TValue13, TValue14, T>>(flags: DefaultCompilerFlags)
            ?? lambda.CompileFast<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, TValue12, TValue13, TValue14, T>>(flags: DefaultCompilerFlags);
    }

    public static Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, TValue12, TValue13, TValue14, TValue15, T> CreateInitializer<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, TValue12, TValue13, TValue14, TValue15, T>(
        MemberInfo member1,
        MemberInfo member2,
        MemberInfo member3,
        MemberInfo member4,
        MemberInfo member5,
        MemberInfo member6,
        MemberInfo member7,
        MemberInfo member8,
        MemberInfo member9,
        MemberInfo member10,
        MemberInfo member11,
        MemberInfo member12,
        MemberInfo member13,
        MemberInfo member14,
        MemberInfo member15)
    {
        var value1 = Expression.Parameter(typeof(TValue1), "value1");
        var value2 = Expression.Parameter(typeof(TValue2), "value2");
        var value3 = Expression.Parameter(typeof(TValue3), "value3");
        var value4 = Expression.Parameter(typeof(TValue4), "value4");
        var value5 = Expression.Parameter(typeof(TValue5), "value5");
        var value6 = Expression.Parameter(typeof(TValue6), "value6");
        var value7 = Expression.Parameter(typeof(TValue7), "value7");
        var value8 = Expression.Parameter(typeof(TValue8), "value8");
        var value9 = Expression.Parameter(typeof(TValue9), "value9");
        var value10 = Expression.Parameter(typeof(TValue10), "value10");
        var value11 = Expression.Parameter(typeof(TValue11), "value11");
        var value12 = Expression.Parameter(typeof(TValue12), "value12");
        var value13 = Expression.Parameter(typeof(TValue13), "value13");
        var value14 = Expression.Parameter(typeof(TValue14), "value14");
        var value15 = Expression.Parameter(typeof(TValue15), "value15");
        var init = Expression.MemberInit(
            Expression.New(typeof(T)),
            Expression.Bind(member1, value1),
            Expression.Bind(member2, value2),
            Expression.Bind(member3, value3),
            Expression.Bind(member4, value4),
            Expression.Bind(member5, value5),
            Expression.Bind(member6, value6),
            Expression.Bind(member7, value7),
            Expression.Bind(member8, value8),
            Expression.Bind(member9, value9),
            Expression.Bind(member10, value10),
            Expression.Bind(member11, value11),
            Expression.Bind(member12, value12),
            Expression.Bind(member13, value13),
            Expression.Bind(member14, value14),
            Expression.Bind(member15, value15));
        var lambda = Expression.Lambda(init, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15);
        return lambda.TryCompileWithoutClosure<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, TValue12, TValue13, TValue14, TValue15, T>>(flags: DefaultCompilerFlags)
            ?? lambda.CompileFast<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, TValue12, TValue13, TValue14, TValue15, T>>(flags: DefaultCompilerFlags);
    }

    public static Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, TValue12, TValue13, TValue14, TValue15, TValue16, T> CreateInitializer<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, TValue12, TValue13, TValue14, TValue15, TValue16, T>(
        MemberInfo member1,
        MemberInfo member2,
        MemberInfo member3,
        MemberInfo member4,
        MemberInfo member5,
        MemberInfo member6,
        MemberInfo member7,
        MemberInfo member8,
        MemberInfo member9,
        MemberInfo member10,
        MemberInfo member11,
        MemberInfo member12,
        MemberInfo member13,
        MemberInfo member14,
        MemberInfo member15,
        MemberInfo member16)
    {
        var value1 = Expression.Parameter(typeof(TValue1), "value1");
        var value2 = Expression.Parameter(typeof(TValue2), "value2");
        var value3 = Expression.Parameter(typeof(TValue3), "value3");
        var value4 = Expression.Parameter(typeof(TValue4), "value4");
        var value5 = Expression.Parameter(typeof(TValue5), "value5");
        var value6 = Expression.Parameter(typeof(TValue6), "value6");
        var value7 = Expression.Parameter(typeof(TValue7), "value7");
        var value8 = Expression.Parameter(typeof(TValue8), "value8");
        var value9 = Expression.Parameter(typeof(TValue9), "value9");
        var value10 = Expression.Parameter(typeof(TValue10), "value10");
        var value11 = Expression.Parameter(typeof(TValue11), "value11");
        var value12 = Expression.Parameter(typeof(TValue12), "value12");
        var value13 = Expression.Parameter(typeof(TValue13), "value13");
        var value14 = Expression.Parameter(typeof(TValue14), "value14");
        var value15 = Expression.Parameter(typeof(TValue15), "value15");
        var value16 = Expression.Parameter(typeof(TValue16), "value16");
        var init = Expression.MemberInit(
            Expression.New(typeof(T)),
            Expression.Bind(member1, value1),
            Expression.Bind(member2, value2),
            Expression.Bind(member3, value3),
            Expression.Bind(member4, value4),
            Expression.Bind(member5, value5),
            Expression.Bind(member6, value6),
            Expression.Bind(member7, value7),
            Expression.Bind(member8, value8),
            Expression.Bind(member9, value9),
            Expression.Bind(member10, value10),
            Expression.Bind(member11, value11),
            Expression.Bind(member12, value12),
            Expression.Bind(member13, value13),
            Expression.Bind(member14, value14),
            Expression.Bind(member15, value15),
            Expression.Bind(member16, value16));
        var lambda = Expression.Lambda(init, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16);
        return lambda.TryCompileWithoutClosure<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, TValue12, TValue13, TValue14, TValue15, TValue16, T>>(flags: DefaultCompilerFlags)
            ?? lambda.CompileFast<Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TValue9, TValue10, TValue11, TValue12, TValue13, TValue14, TValue15, TValue16, T>>(flags: DefaultCompilerFlags);
    }

}

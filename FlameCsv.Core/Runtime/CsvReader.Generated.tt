<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#
    // Max supported generics
    const int TotalCount = 16;
    var indexes = Enumerable.Range(0, TotalCount);
    var genericTypes = indexes.Select(i => $"T{i}").ToArray();
    var parsers = indexes.Select(i => $"ICsvParser<T, T{i}> parser{i}").ToArray();
    var values = indexes.Select(i => $"v{i}").ToArray();
#>
// <auto-generated />
using System.IO.Pipelines;
using FlameCsv.Reading;
using FlameCsv.Runtime;
using CommunityToolkit.Diagnostics;

namespace FlameCsv;

public static partial class CsvReader
{
    [System.Diagnostics.StackTraceHidden]
    private static void ValidateSelectRecordsArgs<T>(object reader, CsvReaderOptions<T> options, object recordFactory)
        where T : unmanaged, IEquatable<T>
    {
        ArgumentNullException.ThrowIfNull(reader);
        ArgumentNullException.ThrowIfNull(options);
        ArgumentNullException.ThrowIfNull(recordFactory);
        Guard.IsFalse(options.HasHeader);
    }

<#
for (var _tokenType = 0; _tokenType < 2; _tokenType++)
{
    string tokenType = _tokenType == 0 ? "char" : "byte";
    string readerType = _tokenType == 0 ? "TextReader" : "PipeReader";
#>
<#
    for (var current = 1; current <= TotalCount; current++)
    {
        var generics = string.Join(", ", genericTypes.Take(current)) + ", TValue";
#>
    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <param name="cancellationToken">Token to cancel the enumeration</param>
    /// <remarks>The CSV records must have <#= current #> column<# if (current != 1) Write("s"); #>.</remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<<#= generics #>>(
        <#= readerType #> reader,
        CsvReaderOptions<<#= tokenType #>> options,
        Func<<#= generics #>> recordFactory,
        CancellationToken cancellationToken = default)
    {
        ValidateSelectRecordsArgs(reader, options, recordFactory);

        Materializer<<#= tokenType #>, <#= generics #>> materializer = new(recordFactory<#
            for (int i = 0; i < current; i++)
            {
                Write(", options.GetParser<");
                Write(genericTypes[i]);
                Write(">()");
            }
        #>);
        CsvProcessor<<#= tokenType #>, TValue> processor = new(options, materializer);

        return ReadAsyncInternal<TValue, CsvProcessor<<#= tokenType #>, TValue>>(
            reader,
            processor,
<# if (tokenType == "char") { #>
            arrayPool: options.ArrayPool,
            leaveOpen: false,
<# } #>            cancellationToken: cancellationToken);
    }

<#
}
}
#>
}
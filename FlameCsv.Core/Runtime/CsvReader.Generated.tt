<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#
    // Max supported generics
    const int TotalCount = 16;
    var indexes = Enumerable.Range(0, TotalCount);
    var genericTypes = indexes.Select(i => $"T{i}").ToArray();
    var parsers = indexes.Select(i => $"ICsvParser<T, T{i}> parser{i}").ToArray();
    var values = indexes.Select(i => $"v{i}").ToArray();
    var methodName = "ReadRecordsAsync";
#>
// <auto-generated />
#nullable enable
using System.Diagnostics.CodeAnalysis;
using System.IO.Pipelines;
using FlameCsv.Reading;
using FlameCsv.Runtime;

namespace FlameCsv;

public static partial class CsvReader
{
    internal sealed class CsvRecordFactoryAsyncEnumerable<T, TValue, TReader> : IAsyncEnumerable<TValue>
        where T : unmanaged, IEquatable<T>
        where TReader : struct, ICsvPipeReader<T>
    {
        private readonly CsvReadingContext<T> _context;
        private readonly TReader _reader;
        private readonly IMaterializer<T, TValue> _materializer;

        public CsvRecordFactoryAsyncEnumerable(in CsvReadingContext<T> context, TReader reader, IMaterializer<T, TValue> materializer)
        {
            _context = context;
            _reader = reader;
            _materializer = materializer;
        }

        public IAsyncEnumerator<TValue> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new CsvValueAsyncEnumerator<T, TValue, TReader, CsvProcessor<T, TValue>>(
                _reader,
                new CsvProcessor<T, TValue>(in _context, _materializer),
                cancellationToken);
        }
    }

    [System.Diagnostics.StackTraceHidden]
    private static CsvReadingContext<T> ValidateReadRecordsArgs<T>(
        [NotNull] object? reader,
        [NotNull] CsvReaderOptions<T>? options,
        [NotNull] object? recordFactory,
        in CsvContextOverride<T> contextOverride)
        where T : unmanaged, IEquatable<T>
    {
        ArgumentNullException.ThrowIfNull(reader);
        ArgumentNullException.ThrowIfNull(options);
        ArgumentNullException.ThrowIfNull(recordFactory);

        CsvReadingContext<T> context = new(options, in contextOverride);

        if (context.HasHeader)
            ThrowArgumentExceptionReadRecordsHasHeader();

        return context;

        static void ThrowArgumentExceptionReadRecordsHasHeader()
        {
            throw new ArgumentException(
                "The options were configured to read a CSV with a header record, " +
                "which is not supported by <#= methodName #>.");
        }
    }

<#
for (var _tokenType = 0; _tokenType < 2; _tokenType++)
{
    string tokenType = _tokenType == 0 ? "char" : "byte";
    string parameterReaderType = _tokenType == 0 ? "TextReader" : "PipeReader";
    string readerType = _tokenType == 0 ? "TextPipeReader" : "CsvBytePipeReader";
    string readerStructType =_tokenType == 0 ? "TextPipeReaderWrapper" : "PipeReaderWrapper";
#>
<#
    for (var current = 1; current <= TotalCount; current++)
    {
        var generics = string.Join(", ", genericTypes.Take(current)) + ", TValue";
#>
    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have <#= current #> field<# if (current != 1) Write("s"); #>.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> <#= methodName #><<#= generics #>>(
        <#= parameterReaderType #> reader,
        CsvReaderOptions<<#= tokenType #>> options,
        Func<<#= generics #>> recordFactory,
        CsvContextOverride<<#= tokenType #>> context = default)
    {
        CsvReadingContext<<#= tokenType #>> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<<#= tokenType #>, <#= generics #>> materializer = new(recordFactory<#
            for (int i = 0; i < current; i++)
            {
                Write(", options.GetParser<");
                Write(genericTypes[i]);
                Write(">()");
            }
        #>);
        CsvProcessor<<#= tokenType #>, TValue> processor = new(in readerContext, materializer);

<# if (tokenType == "char") { #>
        var pipeReader = new TextPipeReaderWrapper(new <#= readerType #>(reader, DefaultBufferSize, readerContext.ArrayPool));
<# } else { #>
        var pipeReader = new PipeReaderWrapper(reader);
<# } #>

        return new CsvRecordFactoryAsyncEnumerable<<#= tokenType #>, TValue, <#= readerStructType #>>(
            in readerContext,
            pipeReader,
            materializer);
    }

<#
}
}
#>
}

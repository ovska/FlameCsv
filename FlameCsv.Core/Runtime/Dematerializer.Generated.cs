// <auto-generated />
using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using FlameCsv.Binding;
using FlameCsv.Binding.Internal;
using FlameCsv.Writing;

namespace FlameCsv.Runtime;

internal abstract partial class Dematerializer<T>
{
    /// <summary>
    /// Returns the constructor info for dematerializer of <typeparamref name="TValue"/>.
    /// </summary>
    /// <param name="bindings">Bindings of the collection used to create the dematerializer</param>
    /// <typeparam name="T">CSV token type</typeparam>
    /// <typeparam name="TValue">Type of the object/struct being read</typeparam>
    [ExcludeFromCodeCoverage]
    [RequiresUnreferencedCode("Trimmed Dematerializer<...> implementations may not be available during runtime.")]
    internal static ConstructorInfo GetConstructor<TValue>(ReadOnlySpan<MemberCsvBinding<TValue>> bindings)
    {
        Type[] types = new Type[bindings.Length + 2];

        for (int i = 0; i < bindings.Length; i++)
        {
            types[i + 1] = bindings[i].Type;
        }

        types[0] = typeof(T);
        types[^1] = typeof(TValue);

        return (types.Length switch
        {
            3 => typeof(Dematerializer<,,>),
            4 => typeof(Dematerializer<,,,>),
            5 => typeof(Dematerializer<,,,,>),
            6 => typeof(Dematerializer<,,,,,>),
            7 => typeof(Dematerializer<,,,,,,>),
            8 => typeof(Dematerializer<,,,,,,,>),
            9 => typeof(Dematerializer<,,,,,,,,>),
            10 => typeof(Dematerializer<,,,,,,,,,>),
            11 => typeof(Dematerializer<,,,,,,,,,,>),
            12 => typeof(Dematerializer<,,,,,,,,,,,>),
            13 => typeof(Dematerializer<,,,,,,,,,,,,>),
            14 => typeof(Dematerializer<,,,,,,,,,,,,,>),
            15 => typeof(Dematerializer<,,,,,,,,,,,,,,>),
            16 => typeof(Dematerializer<,,,,,,,,,,,,,,,>),
            17 => typeof(Dematerializer<,,,,,,,,,,,,,,,,>),
            18 => typeof(Dematerializer<,,,,,,,,,,,,,,,,,>),
            _ => throw new ArgumentException($"Unsupported typeparam count: {bindings.Length}"),
        }).MakeGenericType(types).GetConstructors()[0];
    }
}

/// <inheritdoc />
[ExcludeFromCodeCoverage]
internal sealed class Dematerializer<T, T0, TValue>
    : Dematerializer<T, TValue>, IDematerializer<T, TValue> where T : unmanaged, IEquatable<T>
{
    public int FieldCount => 1;

    public Dematerializer(
        CsvBindingCollection<TValue> bindings,
        CsvOptions<T> options,
        Func<TValue, T0> getter0)
        : base(bindings)
    {
        this.converter0 = options.GetConverter<T0>();
        this.getter0 = getter0;
    }

    private readonly CsvConverter<T, T0> converter0;
    private readonly Func<TValue, T0> getter0;

    public void Write<TWriter>(CsvFieldWriter<T, TWriter> writer, [AllowNull] TValue value) where TWriter : struct, System.Buffers.IBufferWriter<T>
    {
        writer.WriteField(converter0, getter0(value));
        writer.WriteNewline();
    }
}
/// <inheritdoc />
[ExcludeFromCodeCoverage]
internal sealed class Dematerializer<T, T0, T1, TValue>
    : Dematerializer<T, TValue>, IDematerializer<T, TValue> where T : unmanaged, IEquatable<T>
{
    public int FieldCount => 2;

    public Dematerializer(
        CsvBindingCollection<TValue> bindings,
        CsvOptions<T> options,
        Func<TValue, T0> getter0,
        Func<TValue, T1> getter1)
        : base(bindings)
    {
        this.converter0 = options.GetConverter<T0>();
        this.converter1 = options.GetConverter<T1>();
        this.getter0 = getter0;
        this.getter1 = getter1;
    }

    private readonly CsvConverter<T, T0> converter0;
    private readonly CsvConverter<T, T1> converter1;
    private readonly Func<TValue, T0> getter0;
    private readonly Func<TValue, T1> getter1;

    public void Write<TWriter>(CsvFieldWriter<T, TWriter> writer, [AllowNull] TValue value) where TWriter : struct, System.Buffers.IBufferWriter<T>
    {
        writer.WriteField(converter0, getter0(value));
        writer.WriteDelimiter();
        writer.WriteField(converter1, getter1(value));
        writer.WriteNewline();
    }
}
/// <inheritdoc />
[ExcludeFromCodeCoverage]
internal sealed class Dematerializer<T, T0, T1, T2, TValue>
    : Dematerializer<T, TValue>, IDematerializer<T, TValue> where T : unmanaged, IEquatable<T>
{
    public int FieldCount => 3;

    public Dematerializer(
        CsvBindingCollection<TValue> bindings,
        CsvOptions<T> options,
        Func<TValue, T0> getter0,
        Func<TValue, T1> getter1,
        Func<TValue, T2> getter2)
        : base(bindings)
    {
        this.converter0 = options.GetConverter<T0>();
        this.converter1 = options.GetConverter<T1>();
        this.converter2 = options.GetConverter<T2>();
        this.getter0 = getter0;
        this.getter1 = getter1;
        this.getter2 = getter2;
    }

    private readonly CsvConverter<T, T0> converter0;
    private readonly CsvConverter<T, T1> converter1;
    private readonly CsvConverter<T, T2> converter2;
    private readonly Func<TValue, T0> getter0;
    private readonly Func<TValue, T1> getter1;
    private readonly Func<TValue, T2> getter2;

    public void Write<TWriter>(CsvFieldWriter<T, TWriter> writer, [AllowNull] TValue value) where TWriter : struct, System.Buffers.IBufferWriter<T>
    {
        writer.WriteField(converter0, getter0(value));
        writer.WriteDelimiter();
        writer.WriteField(converter1, getter1(value));
        writer.WriteDelimiter();
        writer.WriteField(converter2, getter2(value));
        writer.WriteNewline();
    }
}
/// <inheritdoc />
[ExcludeFromCodeCoverage]
internal sealed class Dematerializer<T, T0, T1, T2, T3, TValue>
    : Dematerializer<T, TValue>, IDematerializer<T, TValue> where T : unmanaged, IEquatable<T>
{
    public int FieldCount => 4;

    public Dematerializer(
        CsvBindingCollection<TValue> bindings,
        CsvOptions<T> options,
        Func<TValue, T0> getter0,
        Func<TValue, T1> getter1,
        Func<TValue, T2> getter2,
        Func<TValue, T3> getter3)
        : base(bindings)
    {
        this.converter0 = options.GetConverter<T0>();
        this.converter1 = options.GetConverter<T1>();
        this.converter2 = options.GetConverter<T2>();
        this.converter3 = options.GetConverter<T3>();
        this.getter0 = getter0;
        this.getter1 = getter1;
        this.getter2 = getter2;
        this.getter3 = getter3;
    }

    private readonly CsvConverter<T, T0> converter0;
    private readonly CsvConverter<T, T1> converter1;
    private readonly CsvConverter<T, T2> converter2;
    private readonly CsvConverter<T, T3> converter3;
    private readonly Func<TValue, T0> getter0;
    private readonly Func<TValue, T1> getter1;
    private readonly Func<TValue, T2> getter2;
    private readonly Func<TValue, T3> getter3;

    public void Write<TWriter>(CsvFieldWriter<T, TWriter> writer, [AllowNull] TValue value) where TWriter : struct, System.Buffers.IBufferWriter<T>
    {
        writer.WriteField(converter0, getter0(value));
        writer.WriteDelimiter();
        writer.WriteField(converter1, getter1(value));
        writer.WriteDelimiter();
        writer.WriteField(converter2, getter2(value));
        writer.WriteDelimiter();
        writer.WriteField(converter3, getter3(value));
        writer.WriteNewline();
    }
}
/// <inheritdoc />
[ExcludeFromCodeCoverage]
internal sealed class Dematerializer<T, T0, T1, T2, T3, T4, TValue>
    : Dematerializer<T, TValue>, IDematerializer<T, TValue> where T : unmanaged, IEquatable<T>
{
    public int FieldCount => 5;

    public Dematerializer(
        CsvBindingCollection<TValue> bindings,
        CsvOptions<T> options,
        Func<TValue, T0> getter0,
        Func<TValue, T1> getter1,
        Func<TValue, T2> getter2,
        Func<TValue, T3> getter3,
        Func<TValue, T4> getter4)
        : base(bindings)
    {
        this.converter0 = options.GetConverter<T0>();
        this.converter1 = options.GetConverter<T1>();
        this.converter2 = options.GetConverter<T2>();
        this.converter3 = options.GetConverter<T3>();
        this.converter4 = options.GetConverter<T4>();
        this.getter0 = getter0;
        this.getter1 = getter1;
        this.getter2 = getter2;
        this.getter3 = getter3;
        this.getter4 = getter4;
    }

    private readonly CsvConverter<T, T0> converter0;
    private readonly CsvConverter<T, T1> converter1;
    private readonly CsvConverter<T, T2> converter2;
    private readonly CsvConverter<T, T3> converter3;
    private readonly CsvConverter<T, T4> converter4;
    private readonly Func<TValue, T0> getter0;
    private readonly Func<TValue, T1> getter1;
    private readonly Func<TValue, T2> getter2;
    private readonly Func<TValue, T3> getter3;
    private readonly Func<TValue, T4> getter4;

    public void Write<TWriter>(CsvFieldWriter<T, TWriter> writer, [AllowNull] TValue value) where TWriter : struct, System.Buffers.IBufferWriter<T>
    {
        writer.WriteField(converter0, getter0(value));
        writer.WriteDelimiter();
        writer.WriteField(converter1, getter1(value));
        writer.WriteDelimiter();
        writer.WriteField(converter2, getter2(value));
        writer.WriteDelimiter();
        writer.WriteField(converter3, getter3(value));
        writer.WriteDelimiter();
        writer.WriteField(converter4, getter4(value));
        writer.WriteNewline();
    }
}
/// <inheritdoc />
[ExcludeFromCodeCoverage]
internal sealed class Dematerializer<T, T0, T1, T2, T3, T4, T5, TValue>
    : Dematerializer<T, TValue>, IDematerializer<T, TValue> where T : unmanaged, IEquatable<T>
{
    public int FieldCount => 6;

    public Dematerializer(
        CsvBindingCollection<TValue> bindings,
        CsvOptions<T> options,
        Func<TValue, T0> getter0,
        Func<TValue, T1> getter1,
        Func<TValue, T2> getter2,
        Func<TValue, T3> getter3,
        Func<TValue, T4> getter4,
        Func<TValue, T5> getter5)
        : base(bindings)
    {
        this.converter0 = options.GetConverter<T0>();
        this.converter1 = options.GetConverter<T1>();
        this.converter2 = options.GetConverter<T2>();
        this.converter3 = options.GetConverter<T3>();
        this.converter4 = options.GetConverter<T4>();
        this.converter5 = options.GetConverter<T5>();
        this.getter0 = getter0;
        this.getter1 = getter1;
        this.getter2 = getter2;
        this.getter3 = getter3;
        this.getter4 = getter4;
        this.getter5 = getter5;
    }

    private readonly CsvConverter<T, T0> converter0;
    private readonly CsvConverter<T, T1> converter1;
    private readonly CsvConverter<T, T2> converter2;
    private readonly CsvConverter<T, T3> converter3;
    private readonly CsvConverter<T, T4> converter4;
    private readonly CsvConverter<T, T5> converter5;
    private readonly Func<TValue, T0> getter0;
    private readonly Func<TValue, T1> getter1;
    private readonly Func<TValue, T2> getter2;
    private readonly Func<TValue, T3> getter3;
    private readonly Func<TValue, T4> getter4;
    private readonly Func<TValue, T5> getter5;

    public void Write<TWriter>(CsvFieldWriter<T, TWriter> writer, [AllowNull] TValue value) where TWriter : struct, System.Buffers.IBufferWriter<T>
    {
        writer.WriteField(converter0, getter0(value));
        writer.WriteDelimiter();
        writer.WriteField(converter1, getter1(value));
        writer.WriteDelimiter();
        writer.WriteField(converter2, getter2(value));
        writer.WriteDelimiter();
        writer.WriteField(converter3, getter3(value));
        writer.WriteDelimiter();
        writer.WriteField(converter4, getter4(value));
        writer.WriteDelimiter();
        writer.WriteField(converter5, getter5(value));
        writer.WriteNewline();
    }
}
/// <inheritdoc />
[ExcludeFromCodeCoverage]
internal sealed class Dematerializer<T, T0, T1, T2, T3, T4, T5, T6, TValue>
    : Dematerializer<T, TValue>, IDematerializer<T, TValue> where T : unmanaged, IEquatable<T>
{
    public int FieldCount => 7;

    public Dematerializer(
        CsvBindingCollection<TValue> bindings,
        CsvOptions<T> options,
        Func<TValue, T0> getter0,
        Func<TValue, T1> getter1,
        Func<TValue, T2> getter2,
        Func<TValue, T3> getter3,
        Func<TValue, T4> getter4,
        Func<TValue, T5> getter5,
        Func<TValue, T6> getter6)
        : base(bindings)
    {
        this.converter0 = options.GetConverter<T0>();
        this.converter1 = options.GetConverter<T1>();
        this.converter2 = options.GetConverter<T2>();
        this.converter3 = options.GetConverter<T3>();
        this.converter4 = options.GetConverter<T4>();
        this.converter5 = options.GetConverter<T5>();
        this.converter6 = options.GetConverter<T6>();
        this.getter0 = getter0;
        this.getter1 = getter1;
        this.getter2 = getter2;
        this.getter3 = getter3;
        this.getter4 = getter4;
        this.getter5 = getter5;
        this.getter6 = getter6;
    }

    private readonly CsvConverter<T, T0> converter0;
    private readonly CsvConverter<T, T1> converter1;
    private readonly CsvConverter<T, T2> converter2;
    private readonly CsvConverter<T, T3> converter3;
    private readonly CsvConverter<T, T4> converter4;
    private readonly CsvConverter<T, T5> converter5;
    private readonly CsvConverter<T, T6> converter6;
    private readonly Func<TValue, T0> getter0;
    private readonly Func<TValue, T1> getter1;
    private readonly Func<TValue, T2> getter2;
    private readonly Func<TValue, T3> getter3;
    private readonly Func<TValue, T4> getter4;
    private readonly Func<TValue, T5> getter5;
    private readonly Func<TValue, T6> getter6;

    public void Write<TWriter>(CsvFieldWriter<T, TWriter> writer, [AllowNull] TValue value) where TWriter : struct, System.Buffers.IBufferWriter<T>
    {
        writer.WriteField(converter0, getter0(value));
        writer.WriteDelimiter();
        writer.WriteField(converter1, getter1(value));
        writer.WriteDelimiter();
        writer.WriteField(converter2, getter2(value));
        writer.WriteDelimiter();
        writer.WriteField(converter3, getter3(value));
        writer.WriteDelimiter();
        writer.WriteField(converter4, getter4(value));
        writer.WriteDelimiter();
        writer.WriteField(converter5, getter5(value));
        writer.WriteDelimiter();
        writer.WriteField(converter6, getter6(value));
        writer.WriteNewline();
    }
}
/// <inheritdoc />
[ExcludeFromCodeCoverage]
internal sealed class Dematerializer<T, T0, T1, T2, T3, T4, T5, T6, T7, TValue>
    : Dematerializer<T, TValue>, IDematerializer<T, TValue> where T : unmanaged, IEquatable<T>
{
    public int FieldCount => 8;

    public Dematerializer(
        CsvBindingCollection<TValue> bindings,
        CsvOptions<T> options,
        Func<TValue, T0> getter0,
        Func<TValue, T1> getter1,
        Func<TValue, T2> getter2,
        Func<TValue, T3> getter3,
        Func<TValue, T4> getter4,
        Func<TValue, T5> getter5,
        Func<TValue, T6> getter6,
        Func<TValue, T7> getter7)
        : base(bindings)
    {
        this.converter0 = options.GetConverter<T0>();
        this.converter1 = options.GetConverter<T1>();
        this.converter2 = options.GetConverter<T2>();
        this.converter3 = options.GetConverter<T3>();
        this.converter4 = options.GetConverter<T4>();
        this.converter5 = options.GetConverter<T5>();
        this.converter6 = options.GetConverter<T6>();
        this.converter7 = options.GetConverter<T7>();
        this.getter0 = getter0;
        this.getter1 = getter1;
        this.getter2 = getter2;
        this.getter3 = getter3;
        this.getter4 = getter4;
        this.getter5 = getter5;
        this.getter6 = getter6;
        this.getter7 = getter7;
    }

    private readonly CsvConverter<T, T0> converter0;
    private readonly CsvConverter<T, T1> converter1;
    private readonly CsvConverter<T, T2> converter2;
    private readonly CsvConverter<T, T3> converter3;
    private readonly CsvConverter<T, T4> converter4;
    private readonly CsvConverter<T, T5> converter5;
    private readonly CsvConverter<T, T6> converter6;
    private readonly CsvConverter<T, T7> converter7;
    private readonly Func<TValue, T0> getter0;
    private readonly Func<TValue, T1> getter1;
    private readonly Func<TValue, T2> getter2;
    private readonly Func<TValue, T3> getter3;
    private readonly Func<TValue, T4> getter4;
    private readonly Func<TValue, T5> getter5;
    private readonly Func<TValue, T6> getter6;
    private readonly Func<TValue, T7> getter7;

    public void Write<TWriter>(CsvFieldWriter<T, TWriter> writer, [AllowNull] TValue value) where TWriter : struct, System.Buffers.IBufferWriter<T>
    {
        writer.WriteField(converter0, getter0(value));
        writer.WriteDelimiter();
        writer.WriteField(converter1, getter1(value));
        writer.WriteDelimiter();
        writer.WriteField(converter2, getter2(value));
        writer.WriteDelimiter();
        writer.WriteField(converter3, getter3(value));
        writer.WriteDelimiter();
        writer.WriteField(converter4, getter4(value));
        writer.WriteDelimiter();
        writer.WriteField(converter5, getter5(value));
        writer.WriteDelimiter();
        writer.WriteField(converter6, getter6(value));
        writer.WriteDelimiter();
        writer.WriteField(converter7, getter7(value));
        writer.WriteNewline();
    }
}
/// <inheritdoc />
[ExcludeFromCodeCoverage]
internal sealed class Dematerializer<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, TValue>
    : Dematerializer<T, TValue>, IDematerializer<T, TValue> where T : unmanaged, IEquatable<T>
{
    public int FieldCount => 9;

    public Dematerializer(
        CsvBindingCollection<TValue> bindings,
        CsvOptions<T> options,
        Func<TValue, T0> getter0,
        Func<TValue, T1> getter1,
        Func<TValue, T2> getter2,
        Func<TValue, T3> getter3,
        Func<TValue, T4> getter4,
        Func<TValue, T5> getter5,
        Func<TValue, T6> getter6,
        Func<TValue, T7> getter7,
        Func<TValue, T8> getter8)
        : base(bindings)
    {
        this.converter0 = options.GetConverter<T0>();
        this.converter1 = options.GetConverter<T1>();
        this.converter2 = options.GetConverter<T2>();
        this.converter3 = options.GetConverter<T3>();
        this.converter4 = options.GetConverter<T4>();
        this.converter5 = options.GetConverter<T5>();
        this.converter6 = options.GetConverter<T6>();
        this.converter7 = options.GetConverter<T7>();
        this.converter8 = options.GetConverter<T8>();
        this.getter0 = getter0;
        this.getter1 = getter1;
        this.getter2 = getter2;
        this.getter3 = getter3;
        this.getter4 = getter4;
        this.getter5 = getter5;
        this.getter6 = getter6;
        this.getter7 = getter7;
        this.getter8 = getter8;
    }

    private readonly CsvConverter<T, T0> converter0;
    private readonly CsvConverter<T, T1> converter1;
    private readonly CsvConverter<T, T2> converter2;
    private readonly CsvConverter<T, T3> converter3;
    private readonly CsvConverter<T, T4> converter4;
    private readonly CsvConverter<T, T5> converter5;
    private readonly CsvConverter<T, T6> converter6;
    private readonly CsvConverter<T, T7> converter7;
    private readonly CsvConverter<T, T8> converter8;
    private readonly Func<TValue, T0> getter0;
    private readonly Func<TValue, T1> getter1;
    private readonly Func<TValue, T2> getter2;
    private readonly Func<TValue, T3> getter3;
    private readonly Func<TValue, T4> getter4;
    private readonly Func<TValue, T5> getter5;
    private readonly Func<TValue, T6> getter6;
    private readonly Func<TValue, T7> getter7;
    private readonly Func<TValue, T8> getter8;

    public void Write<TWriter>(CsvFieldWriter<T, TWriter> writer, [AllowNull] TValue value) where TWriter : struct, System.Buffers.IBufferWriter<T>
    {
        writer.WriteField(converter0, getter0(value));
        writer.WriteDelimiter();
        writer.WriteField(converter1, getter1(value));
        writer.WriteDelimiter();
        writer.WriteField(converter2, getter2(value));
        writer.WriteDelimiter();
        writer.WriteField(converter3, getter3(value));
        writer.WriteDelimiter();
        writer.WriteField(converter4, getter4(value));
        writer.WriteDelimiter();
        writer.WriteField(converter5, getter5(value));
        writer.WriteDelimiter();
        writer.WriteField(converter6, getter6(value));
        writer.WriteDelimiter();
        writer.WriteField(converter7, getter7(value));
        writer.WriteDelimiter();
        writer.WriteField(converter8, getter8(value));
        writer.WriteNewline();
    }
}
/// <inheritdoc />
[ExcludeFromCodeCoverage]
internal sealed class Dematerializer<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TValue>
    : Dematerializer<T, TValue>, IDematerializer<T, TValue> where T : unmanaged, IEquatable<T>
{
    public int FieldCount => 10;

    public Dematerializer(
        CsvBindingCollection<TValue> bindings,
        CsvOptions<T> options,
        Func<TValue, T0> getter0,
        Func<TValue, T1> getter1,
        Func<TValue, T2> getter2,
        Func<TValue, T3> getter3,
        Func<TValue, T4> getter4,
        Func<TValue, T5> getter5,
        Func<TValue, T6> getter6,
        Func<TValue, T7> getter7,
        Func<TValue, T8> getter8,
        Func<TValue, T9> getter9)
        : base(bindings)
    {
        this.converter0 = options.GetConverter<T0>();
        this.converter1 = options.GetConverter<T1>();
        this.converter2 = options.GetConverter<T2>();
        this.converter3 = options.GetConverter<T3>();
        this.converter4 = options.GetConverter<T4>();
        this.converter5 = options.GetConverter<T5>();
        this.converter6 = options.GetConverter<T6>();
        this.converter7 = options.GetConverter<T7>();
        this.converter8 = options.GetConverter<T8>();
        this.converter9 = options.GetConverter<T9>();
        this.getter0 = getter0;
        this.getter1 = getter1;
        this.getter2 = getter2;
        this.getter3 = getter3;
        this.getter4 = getter4;
        this.getter5 = getter5;
        this.getter6 = getter6;
        this.getter7 = getter7;
        this.getter8 = getter8;
        this.getter9 = getter9;
    }

    private readonly CsvConverter<T, T0> converter0;
    private readonly CsvConverter<T, T1> converter1;
    private readonly CsvConverter<T, T2> converter2;
    private readonly CsvConverter<T, T3> converter3;
    private readonly CsvConverter<T, T4> converter4;
    private readonly CsvConverter<T, T5> converter5;
    private readonly CsvConverter<T, T6> converter6;
    private readonly CsvConverter<T, T7> converter7;
    private readonly CsvConverter<T, T8> converter8;
    private readonly CsvConverter<T, T9> converter9;
    private readonly Func<TValue, T0> getter0;
    private readonly Func<TValue, T1> getter1;
    private readonly Func<TValue, T2> getter2;
    private readonly Func<TValue, T3> getter3;
    private readonly Func<TValue, T4> getter4;
    private readonly Func<TValue, T5> getter5;
    private readonly Func<TValue, T6> getter6;
    private readonly Func<TValue, T7> getter7;
    private readonly Func<TValue, T8> getter8;
    private readonly Func<TValue, T9> getter9;

    public void Write<TWriter>(CsvFieldWriter<T, TWriter> writer, [AllowNull] TValue value) where TWriter : struct, System.Buffers.IBufferWriter<T>
    {
        writer.WriteField(converter0, getter0(value));
        writer.WriteDelimiter();
        writer.WriteField(converter1, getter1(value));
        writer.WriteDelimiter();
        writer.WriteField(converter2, getter2(value));
        writer.WriteDelimiter();
        writer.WriteField(converter3, getter3(value));
        writer.WriteDelimiter();
        writer.WriteField(converter4, getter4(value));
        writer.WriteDelimiter();
        writer.WriteField(converter5, getter5(value));
        writer.WriteDelimiter();
        writer.WriteField(converter6, getter6(value));
        writer.WriteDelimiter();
        writer.WriteField(converter7, getter7(value));
        writer.WriteDelimiter();
        writer.WriteField(converter8, getter8(value));
        writer.WriteDelimiter();
        writer.WriteField(converter9, getter9(value));
        writer.WriteNewline();
    }
}
/// <inheritdoc />
[ExcludeFromCodeCoverage]
internal sealed class Dematerializer<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TValue>
    : Dematerializer<T, TValue>, IDematerializer<T, TValue> where T : unmanaged, IEquatable<T>
{
    public int FieldCount => 11;

    public Dematerializer(
        CsvBindingCollection<TValue> bindings,
        CsvOptions<T> options,
        Func<TValue, T0> getter0,
        Func<TValue, T1> getter1,
        Func<TValue, T2> getter2,
        Func<TValue, T3> getter3,
        Func<TValue, T4> getter4,
        Func<TValue, T5> getter5,
        Func<TValue, T6> getter6,
        Func<TValue, T7> getter7,
        Func<TValue, T8> getter8,
        Func<TValue, T9> getter9,
        Func<TValue, T10> getter10)
        : base(bindings)
    {
        this.converter0 = options.GetConverter<T0>();
        this.converter1 = options.GetConverter<T1>();
        this.converter2 = options.GetConverter<T2>();
        this.converter3 = options.GetConverter<T3>();
        this.converter4 = options.GetConverter<T4>();
        this.converter5 = options.GetConverter<T5>();
        this.converter6 = options.GetConverter<T6>();
        this.converter7 = options.GetConverter<T7>();
        this.converter8 = options.GetConverter<T8>();
        this.converter9 = options.GetConverter<T9>();
        this.converter10 = options.GetConverter<T10>();
        this.getter0 = getter0;
        this.getter1 = getter1;
        this.getter2 = getter2;
        this.getter3 = getter3;
        this.getter4 = getter4;
        this.getter5 = getter5;
        this.getter6 = getter6;
        this.getter7 = getter7;
        this.getter8 = getter8;
        this.getter9 = getter9;
        this.getter10 = getter10;
    }

    private readonly CsvConverter<T, T0> converter0;
    private readonly CsvConverter<T, T1> converter1;
    private readonly CsvConverter<T, T2> converter2;
    private readonly CsvConverter<T, T3> converter3;
    private readonly CsvConverter<T, T4> converter4;
    private readonly CsvConverter<T, T5> converter5;
    private readonly CsvConverter<T, T6> converter6;
    private readonly CsvConverter<T, T7> converter7;
    private readonly CsvConverter<T, T8> converter8;
    private readonly CsvConverter<T, T9> converter9;
    private readonly CsvConverter<T, T10> converter10;
    private readonly Func<TValue, T0> getter0;
    private readonly Func<TValue, T1> getter1;
    private readonly Func<TValue, T2> getter2;
    private readonly Func<TValue, T3> getter3;
    private readonly Func<TValue, T4> getter4;
    private readonly Func<TValue, T5> getter5;
    private readonly Func<TValue, T6> getter6;
    private readonly Func<TValue, T7> getter7;
    private readonly Func<TValue, T8> getter8;
    private readonly Func<TValue, T9> getter9;
    private readonly Func<TValue, T10> getter10;

    public void Write<TWriter>(CsvFieldWriter<T, TWriter> writer, [AllowNull] TValue value) where TWriter : struct, System.Buffers.IBufferWriter<T>
    {
        writer.WriteField(converter0, getter0(value));
        writer.WriteDelimiter();
        writer.WriteField(converter1, getter1(value));
        writer.WriteDelimiter();
        writer.WriteField(converter2, getter2(value));
        writer.WriteDelimiter();
        writer.WriteField(converter3, getter3(value));
        writer.WriteDelimiter();
        writer.WriteField(converter4, getter4(value));
        writer.WriteDelimiter();
        writer.WriteField(converter5, getter5(value));
        writer.WriteDelimiter();
        writer.WriteField(converter6, getter6(value));
        writer.WriteDelimiter();
        writer.WriteField(converter7, getter7(value));
        writer.WriteDelimiter();
        writer.WriteField(converter8, getter8(value));
        writer.WriteDelimiter();
        writer.WriteField(converter9, getter9(value));
        writer.WriteDelimiter();
        writer.WriteField(converter10, getter10(value));
        writer.WriteNewline();
    }
}
/// <inheritdoc />
[ExcludeFromCodeCoverage]
internal sealed class Dematerializer<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TValue>
    : Dematerializer<T, TValue>, IDematerializer<T, TValue> where T : unmanaged, IEquatable<T>
{
    public int FieldCount => 12;

    public Dematerializer(
        CsvBindingCollection<TValue> bindings,
        CsvOptions<T> options,
        Func<TValue, T0> getter0,
        Func<TValue, T1> getter1,
        Func<TValue, T2> getter2,
        Func<TValue, T3> getter3,
        Func<TValue, T4> getter4,
        Func<TValue, T5> getter5,
        Func<TValue, T6> getter6,
        Func<TValue, T7> getter7,
        Func<TValue, T8> getter8,
        Func<TValue, T9> getter9,
        Func<TValue, T10> getter10,
        Func<TValue, T11> getter11)
        : base(bindings)
    {
        this.converter0 = options.GetConverter<T0>();
        this.converter1 = options.GetConverter<T1>();
        this.converter2 = options.GetConverter<T2>();
        this.converter3 = options.GetConverter<T3>();
        this.converter4 = options.GetConverter<T4>();
        this.converter5 = options.GetConverter<T5>();
        this.converter6 = options.GetConverter<T6>();
        this.converter7 = options.GetConverter<T7>();
        this.converter8 = options.GetConverter<T8>();
        this.converter9 = options.GetConverter<T9>();
        this.converter10 = options.GetConverter<T10>();
        this.converter11 = options.GetConverter<T11>();
        this.getter0 = getter0;
        this.getter1 = getter1;
        this.getter2 = getter2;
        this.getter3 = getter3;
        this.getter4 = getter4;
        this.getter5 = getter5;
        this.getter6 = getter6;
        this.getter7 = getter7;
        this.getter8 = getter8;
        this.getter9 = getter9;
        this.getter10 = getter10;
        this.getter11 = getter11;
    }

    private readonly CsvConverter<T, T0> converter0;
    private readonly CsvConverter<T, T1> converter1;
    private readonly CsvConverter<T, T2> converter2;
    private readonly CsvConverter<T, T3> converter3;
    private readonly CsvConverter<T, T4> converter4;
    private readonly CsvConverter<T, T5> converter5;
    private readonly CsvConverter<T, T6> converter6;
    private readonly CsvConverter<T, T7> converter7;
    private readonly CsvConverter<T, T8> converter8;
    private readonly CsvConverter<T, T9> converter9;
    private readonly CsvConverter<T, T10> converter10;
    private readonly CsvConverter<T, T11> converter11;
    private readonly Func<TValue, T0> getter0;
    private readonly Func<TValue, T1> getter1;
    private readonly Func<TValue, T2> getter2;
    private readonly Func<TValue, T3> getter3;
    private readonly Func<TValue, T4> getter4;
    private readonly Func<TValue, T5> getter5;
    private readonly Func<TValue, T6> getter6;
    private readonly Func<TValue, T7> getter7;
    private readonly Func<TValue, T8> getter8;
    private readonly Func<TValue, T9> getter9;
    private readonly Func<TValue, T10> getter10;
    private readonly Func<TValue, T11> getter11;

    public void Write<TWriter>(CsvFieldWriter<T, TWriter> writer, [AllowNull] TValue value) where TWriter : struct, System.Buffers.IBufferWriter<T>
    {
        writer.WriteField(converter0, getter0(value));
        writer.WriteDelimiter();
        writer.WriteField(converter1, getter1(value));
        writer.WriteDelimiter();
        writer.WriteField(converter2, getter2(value));
        writer.WriteDelimiter();
        writer.WriteField(converter3, getter3(value));
        writer.WriteDelimiter();
        writer.WriteField(converter4, getter4(value));
        writer.WriteDelimiter();
        writer.WriteField(converter5, getter5(value));
        writer.WriteDelimiter();
        writer.WriteField(converter6, getter6(value));
        writer.WriteDelimiter();
        writer.WriteField(converter7, getter7(value));
        writer.WriteDelimiter();
        writer.WriteField(converter8, getter8(value));
        writer.WriteDelimiter();
        writer.WriteField(converter9, getter9(value));
        writer.WriteDelimiter();
        writer.WriteField(converter10, getter10(value));
        writer.WriteDelimiter();
        writer.WriteField(converter11, getter11(value));
        writer.WriteNewline();
    }
}
/// <inheritdoc />
[ExcludeFromCodeCoverage]
internal sealed class Dematerializer<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TValue>
    : Dematerializer<T, TValue>, IDematerializer<T, TValue> where T : unmanaged, IEquatable<T>
{
    public int FieldCount => 13;

    public Dematerializer(
        CsvBindingCollection<TValue> bindings,
        CsvOptions<T> options,
        Func<TValue, T0> getter0,
        Func<TValue, T1> getter1,
        Func<TValue, T2> getter2,
        Func<TValue, T3> getter3,
        Func<TValue, T4> getter4,
        Func<TValue, T5> getter5,
        Func<TValue, T6> getter6,
        Func<TValue, T7> getter7,
        Func<TValue, T8> getter8,
        Func<TValue, T9> getter9,
        Func<TValue, T10> getter10,
        Func<TValue, T11> getter11,
        Func<TValue, T12> getter12)
        : base(bindings)
    {
        this.converter0 = options.GetConverter<T0>();
        this.converter1 = options.GetConverter<T1>();
        this.converter2 = options.GetConverter<T2>();
        this.converter3 = options.GetConverter<T3>();
        this.converter4 = options.GetConverter<T4>();
        this.converter5 = options.GetConverter<T5>();
        this.converter6 = options.GetConverter<T6>();
        this.converter7 = options.GetConverter<T7>();
        this.converter8 = options.GetConverter<T8>();
        this.converter9 = options.GetConverter<T9>();
        this.converter10 = options.GetConverter<T10>();
        this.converter11 = options.GetConverter<T11>();
        this.converter12 = options.GetConverter<T12>();
        this.getter0 = getter0;
        this.getter1 = getter1;
        this.getter2 = getter2;
        this.getter3 = getter3;
        this.getter4 = getter4;
        this.getter5 = getter5;
        this.getter6 = getter6;
        this.getter7 = getter7;
        this.getter8 = getter8;
        this.getter9 = getter9;
        this.getter10 = getter10;
        this.getter11 = getter11;
        this.getter12 = getter12;
    }

    private readonly CsvConverter<T, T0> converter0;
    private readonly CsvConverter<T, T1> converter1;
    private readonly CsvConverter<T, T2> converter2;
    private readonly CsvConverter<T, T3> converter3;
    private readonly CsvConverter<T, T4> converter4;
    private readonly CsvConverter<T, T5> converter5;
    private readonly CsvConverter<T, T6> converter6;
    private readonly CsvConverter<T, T7> converter7;
    private readonly CsvConverter<T, T8> converter8;
    private readonly CsvConverter<T, T9> converter9;
    private readonly CsvConverter<T, T10> converter10;
    private readonly CsvConverter<T, T11> converter11;
    private readonly CsvConverter<T, T12> converter12;
    private readonly Func<TValue, T0> getter0;
    private readonly Func<TValue, T1> getter1;
    private readonly Func<TValue, T2> getter2;
    private readonly Func<TValue, T3> getter3;
    private readonly Func<TValue, T4> getter4;
    private readonly Func<TValue, T5> getter5;
    private readonly Func<TValue, T6> getter6;
    private readonly Func<TValue, T7> getter7;
    private readonly Func<TValue, T8> getter8;
    private readonly Func<TValue, T9> getter9;
    private readonly Func<TValue, T10> getter10;
    private readonly Func<TValue, T11> getter11;
    private readonly Func<TValue, T12> getter12;

    public void Write<TWriter>(CsvFieldWriter<T, TWriter> writer, [AllowNull] TValue value) where TWriter : struct, System.Buffers.IBufferWriter<T>
    {
        writer.WriteField(converter0, getter0(value));
        writer.WriteDelimiter();
        writer.WriteField(converter1, getter1(value));
        writer.WriteDelimiter();
        writer.WriteField(converter2, getter2(value));
        writer.WriteDelimiter();
        writer.WriteField(converter3, getter3(value));
        writer.WriteDelimiter();
        writer.WriteField(converter4, getter4(value));
        writer.WriteDelimiter();
        writer.WriteField(converter5, getter5(value));
        writer.WriteDelimiter();
        writer.WriteField(converter6, getter6(value));
        writer.WriteDelimiter();
        writer.WriteField(converter7, getter7(value));
        writer.WriteDelimiter();
        writer.WriteField(converter8, getter8(value));
        writer.WriteDelimiter();
        writer.WriteField(converter9, getter9(value));
        writer.WriteDelimiter();
        writer.WriteField(converter10, getter10(value));
        writer.WriteDelimiter();
        writer.WriteField(converter11, getter11(value));
        writer.WriteDelimiter();
        writer.WriteField(converter12, getter12(value));
        writer.WriteNewline();
    }
}
/// <inheritdoc />
[ExcludeFromCodeCoverage]
internal sealed class Dematerializer<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TValue>
    : Dematerializer<T, TValue>, IDematerializer<T, TValue> where T : unmanaged, IEquatable<T>
{
    public int FieldCount => 14;

    public Dematerializer(
        CsvBindingCollection<TValue> bindings,
        CsvOptions<T> options,
        Func<TValue, T0> getter0,
        Func<TValue, T1> getter1,
        Func<TValue, T2> getter2,
        Func<TValue, T3> getter3,
        Func<TValue, T4> getter4,
        Func<TValue, T5> getter5,
        Func<TValue, T6> getter6,
        Func<TValue, T7> getter7,
        Func<TValue, T8> getter8,
        Func<TValue, T9> getter9,
        Func<TValue, T10> getter10,
        Func<TValue, T11> getter11,
        Func<TValue, T12> getter12,
        Func<TValue, T13> getter13)
        : base(bindings)
    {
        this.converter0 = options.GetConverter<T0>();
        this.converter1 = options.GetConverter<T1>();
        this.converter2 = options.GetConverter<T2>();
        this.converter3 = options.GetConverter<T3>();
        this.converter4 = options.GetConverter<T4>();
        this.converter5 = options.GetConverter<T5>();
        this.converter6 = options.GetConverter<T6>();
        this.converter7 = options.GetConverter<T7>();
        this.converter8 = options.GetConverter<T8>();
        this.converter9 = options.GetConverter<T9>();
        this.converter10 = options.GetConverter<T10>();
        this.converter11 = options.GetConverter<T11>();
        this.converter12 = options.GetConverter<T12>();
        this.converter13 = options.GetConverter<T13>();
        this.getter0 = getter0;
        this.getter1 = getter1;
        this.getter2 = getter2;
        this.getter3 = getter3;
        this.getter4 = getter4;
        this.getter5 = getter5;
        this.getter6 = getter6;
        this.getter7 = getter7;
        this.getter8 = getter8;
        this.getter9 = getter9;
        this.getter10 = getter10;
        this.getter11 = getter11;
        this.getter12 = getter12;
        this.getter13 = getter13;
    }

    private readonly CsvConverter<T, T0> converter0;
    private readonly CsvConverter<T, T1> converter1;
    private readonly CsvConverter<T, T2> converter2;
    private readonly CsvConverter<T, T3> converter3;
    private readonly CsvConverter<T, T4> converter4;
    private readonly CsvConverter<T, T5> converter5;
    private readonly CsvConverter<T, T6> converter6;
    private readonly CsvConverter<T, T7> converter7;
    private readonly CsvConverter<T, T8> converter8;
    private readonly CsvConverter<T, T9> converter9;
    private readonly CsvConverter<T, T10> converter10;
    private readonly CsvConverter<T, T11> converter11;
    private readonly CsvConverter<T, T12> converter12;
    private readonly CsvConverter<T, T13> converter13;
    private readonly Func<TValue, T0> getter0;
    private readonly Func<TValue, T1> getter1;
    private readonly Func<TValue, T2> getter2;
    private readonly Func<TValue, T3> getter3;
    private readonly Func<TValue, T4> getter4;
    private readonly Func<TValue, T5> getter5;
    private readonly Func<TValue, T6> getter6;
    private readonly Func<TValue, T7> getter7;
    private readonly Func<TValue, T8> getter8;
    private readonly Func<TValue, T9> getter9;
    private readonly Func<TValue, T10> getter10;
    private readonly Func<TValue, T11> getter11;
    private readonly Func<TValue, T12> getter12;
    private readonly Func<TValue, T13> getter13;

    public void Write<TWriter>(CsvFieldWriter<T, TWriter> writer, [AllowNull] TValue value) where TWriter : struct, System.Buffers.IBufferWriter<T>
    {
        writer.WriteField(converter0, getter0(value));
        writer.WriteDelimiter();
        writer.WriteField(converter1, getter1(value));
        writer.WriteDelimiter();
        writer.WriteField(converter2, getter2(value));
        writer.WriteDelimiter();
        writer.WriteField(converter3, getter3(value));
        writer.WriteDelimiter();
        writer.WriteField(converter4, getter4(value));
        writer.WriteDelimiter();
        writer.WriteField(converter5, getter5(value));
        writer.WriteDelimiter();
        writer.WriteField(converter6, getter6(value));
        writer.WriteDelimiter();
        writer.WriteField(converter7, getter7(value));
        writer.WriteDelimiter();
        writer.WriteField(converter8, getter8(value));
        writer.WriteDelimiter();
        writer.WriteField(converter9, getter9(value));
        writer.WriteDelimiter();
        writer.WriteField(converter10, getter10(value));
        writer.WriteDelimiter();
        writer.WriteField(converter11, getter11(value));
        writer.WriteDelimiter();
        writer.WriteField(converter12, getter12(value));
        writer.WriteDelimiter();
        writer.WriteField(converter13, getter13(value));
        writer.WriteNewline();
    }
}
/// <inheritdoc />
[ExcludeFromCodeCoverage]
internal sealed class Dematerializer<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TValue>
    : Dematerializer<T, TValue>, IDematerializer<T, TValue> where T : unmanaged, IEquatable<T>
{
    public int FieldCount => 15;

    public Dematerializer(
        CsvBindingCollection<TValue> bindings,
        CsvOptions<T> options,
        Func<TValue, T0> getter0,
        Func<TValue, T1> getter1,
        Func<TValue, T2> getter2,
        Func<TValue, T3> getter3,
        Func<TValue, T4> getter4,
        Func<TValue, T5> getter5,
        Func<TValue, T6> getter6,
        Func<TValue, T7> getter7,
        Func<TValue, T8> getter8,
        Func<TValue, T9> getter9,
        Func<TValue, T10> getter10,
        Func<TValue, T11> getter11,
        Func<TValue, T12> getter12,
        Func<TValue, T13> getter13,
        Func<TValue, T14> getter14)
        : base(bindings)
    {
        this.converter0 = options.GetConverter<T0>();
        this.converter1 = options.GetConverter<T1>();
        this.converter2 = options.GetConverter<T2>();
        this.converter3 = options.GetConverter<T3>();
        this.converter4 = options.GetConverter<T4>();
        this.converter5 = options.GetConverter<T5>();
        this.converter6 = options.GetConverter<T6>();
        this.converter7 = options.GetConverter<T7>();
        this.converter8 = options.GetConverter<T8>();
        this.converter9 = options.GetConverter<T9>();
        this.converter10 = options.GetConverter<T10>();
        this.converter11 = options.GetConverter<T11>();
        this.converter12 = options.GetConverter<T12>();
        this.converter13 = options.GetConverter<T13>();
        this.converter14 = options.GetConverter<T14>();
        this.getter0 = getter0;
        this.getter1 = getter1;
        this.getter2 = getter2;
        this.getter3 = getter3;
        this.getter4 = getter4;
        this.getter5 = getter5;
        this.getter6 = getter6;
        this.getter7 = getter7;
        this.getter8 = getter8;
        this.getter9 = getter9;
        this.getter10 = getter10;
        this.getter11 = getter11;
        this.getter12 = getter12;
        this.getter13 = getter13;
        this.getter14 = getter14;
    }

    private readonly CsvConverter<T, T0> converter0;
    private readonly CsvConverter<T, T1> converter1;
    private readonly CsvConverter<T, T2> converter2;
    private readonly CsvConverter<T, T3> converter3;
    private readonly CsvConverter<T, T4> converter4;
    private readonly CsvConverter<T, T5> converter5;
    private readonly CsvConverter<T, T6> converter6;
    private readonly CsvConverter<T, T7> converter7;
    private readonly CsvConverter<T, T8> converter8;
    private readonly CsvConverter<T, T9> converter9;
    private readonly CsvConverter<T, T10> converter10;
    private readonly CsvConverter<T, T11> converter11;
    private readonly CsvConverter<T, T12> converter12;
    private readonly CsvConverter<T, T13> converter13;
    private readonly CsvConverter<T, T14> converter14;
    private readonly Func<TValue, T0> getter0;
    private readonly Func<TValue, T1> getter1;
    private readonly Func<TValue, T2> getter2;
    private readonly Func<TValue, T3> getter3;
    private readonly Func<TValue, T4> getter4;
    private readonly Func<TValue, T5> getter5;
    private readonly Func<TValue, T6> getter6;
    private readonly Func<TValue, T7> getter7;
    private readonly Func<TValue, T8> getter8;
    private readonly Func<TValue, T9> getter9;
    private readonly Func<TValue, T10> getter10;
    private readonly Func<TValue, T11> getter11;
    private readonly Func<TValue, T12> getter12;
    private readonly Func<TValue, T13> getter13;
    private readonly Func<TValue, T14> getter14;

    public void Write<TWriter>(CsvFieldWriter<T, TWriter> writer, [AllowNull] TValue value) where TWriter : struct, System.Buffers.IBufferWriter<T>
    {
        writer.WriteField(converter0, getter0(value));
        writer.WriteDelimiter();
        writer.WriteField(converter1, getter1(value));
        writer.WriteDelimiter();
        writer.WriteField(converter2, getter2(value));
        writer.WriteDelimiter();
        writer.WriteField(converter3, getter3(value));
        writer.WriteDelimiter();
        writer.WriteField(converter4, getter4(value));
        writer.WriteDelimiter();
        writer.WriteField(converter5, getter5(value));
        writer.WriteDelimiter();
        writer.WriteField(converter6, getter6(value));
        writer.WriteDelimiter();
        writer.WriteField(converter7, getter7(value));
        writer.WriteDelimiter();
        writer.WriteField(converter8, getter8(value));
        writer.WriteDelimiter();
        writer.WriteField(converter9, getter9(value));
        writer.WriteDelimiter();
        writer.WriteField(converter10, getter10(value));
        writer.WriteDelimiter();
        writer.WriteField(converter11, getter11(value));
        writer.WriteDelimiter();
        writer.WriteField(converter12, getter12(value));
        writer.WriteDelimiter();
        writer.WriteField(converter13, getter13(value));
        writer.WriteDelimiter();
        writer.WriteField(converter14, getter14(value));
        writer.WriteNewline();
    }
}
/// <inheritdoc />
[ExcludeFromCodeCoverage]
internal sealed class Dematerializer<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TValue>
    : Dematerializer<T, TValue>, IDematerializer<T, TValue> where T : unmanaged, IEquatable<T>
{
    public int FieldCount => 16;

    public Dematerializer(
        CsvBindingCollection<TValue> bindings,
        CsvOptions<T> options,
        Func<TValue, T0> getter0,
        Func<TValue, T1> getter1,
        Func<TValue, T2> getter2,
        Func<TValue, T3> getter3,
        Func<TValue, T4> getter4,
        Func<TValue, T5> getter5,
        Func<TValue, T6> getter6,
        Func<TValue, T7> getter7,
        Func<TValue, T8> getter8,
        Func<TValue, T9> getter9,
        Func<TValue, T10> getter10,
        Func<TValue, T11> getter11,
        Func<TValue, T12> getter12,
        Func<TValue, T13> getter13,
        Func<TValue, T14> getter14,
        Func<TValue, T15> getter15)
        : base(bindings)
    {
        this.converter0 = options.GetConverter<T0>();
        this.converter1 = options.GetConverter<T1>();
        this.converter2 = options.GetConverter<T2>();
        this.converter3 = options.GetConverter<T3>();
        this.converter4 = options.GetConverter<T4>();
        this.converter5 = options.GetConverter<T5>();
        this.converter6 = options.GetConverter<T6>();
        this.converter7 = options.GetConverter<T7>();
        this.converter8 = options.GetConverter<T8>();
        this.converter9 = options.GetConverter<T9>();
        this.converter10 = options.GetConverter<T10>();
        this.converter11 = options.GetConverter<T11>();
        this.converter12 = options.GetConverter<T12>();
        this.converter13 = options.GetConverter<T13>();
        this.converter14 = options.GetConverter<T14>();
        this.converter15 = options.GetConverter<T15>();
        this.getter0 = getter0;
        this.getter1 = getter1;
        this.getter2 = getter2;
        this.getter3 = getter3;
        this.getter4 = getter4;
        this.getter5 = getter5;
        this.getter6 = getter6;
        this.getter7 = getter7;
        this.getter8 = getter8;
        this.getter9 = getter9;
        this.getter10 = getter10;
        this.getter11 = getter11;
        this.getter12 = getter12;
        this.getter13 = getter13;
        this.getter14 = getter14;
        this.getter15 = getter15;
    }

    private readonly CsvConverter<T, T0> converter0;
    private readonly CsvConverter<T, T1> converter1;
    private readonly CsvConverter<T, T2> converter2;
    private readonly CsvConverter<T, T3> converter3;
    private readonly CsvConverter<T, T4> converter4;
    private readonly CsvConverter<T, T5> converter5;
    private readonly CsvConverter<T, T6> converter6;
    private readonly CsvConverter<T, T7> converter7;
    private readonly CsvConverter<T, T8> converter8;
    private readonly CsvConverter<T, T9> converter9;
    private readonly CsvConverter<T, T10> converter10;
    private readonly CsvConverter<T, T11> converter11;
    private readonly CsvConverter<T, T12> converter12;
    private readonly CsvConverter<T, T13> converter13;
    private readonly CsvConverter<T, T14> converter14;
    private readonly CsvConverter<T, T15> converter15;
    private readonly Func<TValue, T0> getter0;
    private readonly Func<TValue, T1> getter1;
    private readonly Func<TValue, T2> getter2;
    private readonly Func<TValue, T3> getter3;
    private readonly Func<TValue, T4> getter4;
    private readonly Func<TValue, T5> getter5;
    private readonly Func<TValue, T6> getter6;
    private readonly Func<TValue, T7> getter7;
    private readonly Func<TValue, T8> getter8;
    private readonly Func<TValue, T9> getter9;
    private readonly Func<TValue, T10> getter10;
    private readonly Func<TValue, T11> getter11;
    private readonly Func<TValue, T12> getter12;
    private readonly Func<TValue, T13> getter13;
    private readonly Func<TValue, T14> getter14;
    private readonly Func<TValue, T15> getter15;

    public void Write<TWriter>(CsvFieldWriter<T, TWriter> writer, [AllowNull] TValue value) where TWriter : struct, System.Buffers.IBufferWriter<T>
    {
        writer.WriteField(converter0, getter0(value));
        writer.WriteDelimiter();
        writer.WriteField(converter1, getter1(value));
        writer.WriteDelimiter();
        writer.WriteField(converter2, getter2(value));
        writer.WriteDelimiter();
        writer.WriteField(converter3, getter3(value));
        writer.WriteDelimiter();
        writer.WriteField(converter4, getter4(value));
        writer.WriteDelimiter();
        writer.WriteField(converter5, getter5(value));
        writer.WriteDelimiter();
        writer.WriteField(converter6, getter6(value));
        writer.WriteDelimiter();
        writer.WriteField(converter7, getter7(value));
        writer.WriteDelimiter();
        writer.WriteField(converter8, getter8(value));
        writer.WriteDelimiter();
        writer.WriteField(converter9, getter9(value));
        writer.WriteDelimiter();
        writer.WriteField(converter10, getter10(value));
        writer.WriteDelimiter();
        writer.WriteField(converter11, getter11(value));
        writer.WriteDelimiter();
        writer.WriteField(converter12, getter12(value));
        writer.WriteDelimiter();
        writer.WriteField(converter13, getter13(value));
        writer.WriteDelimiter();
        writer.WriteField(converter14, getter14(value));
        writer.WriteDelimiter();
        writer.WriteField(converter15, getter15(value));
        writer.WriteNewline();
    }
}

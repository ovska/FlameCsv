// <auto-generated />
using FlameCsv.Writers;

namespace FlameCsv;

internal static class WriteTestGen<T, TWriter>
    where T : unmanaged, IEquatable<T>
    where TWriter : struct, IAsyncBufferWriter<T>
{
    private static void EnsureNoHeader(CsvWriterOptions<T> options)
	{
		if (options.WriteHeader)
            ThrowForHeaderRecordWhenWritingTuples();
	}

    private static void ThrowForHeaderRecordWhenWritingTuples()
    {
        throw new InvalidOperationException("Cannot write header when writing value tuples.");
    }

    public static async Task Write<T0, T1>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IEnumerable<(T0, T1)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        using var enumerator = records.GetEnumerator();

        if (!enumerator.MoveNext())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteNewline();
        } while (enumerator.MoveNext());
    }

    public static async Task WriteAsync<T0, T1>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IAsyncEnumerable<(T0, T1)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        await using var enumerator = records.GetAsyncEnumerator(cancellationToken);

        if (!await enumerator.MoveNextAsync())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteNewline();
        } while (await enumerator.MoveNextAsync());
    }

    public static async Task Write<T0, T1, T2>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IEnumerable<(T0, T1, T2)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        using var enumerator = records.GetEnumerator();

        if (!enumerator.MoveNext())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteNewline();
        } while (enumerator.MoveNext());
    }

    public static async Task WriteAsync<T0, T1, T2>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IAsyncEnumerable<(T0, T1, T2)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        await using var enumerator = records.GetAsyncEnumerator(cancellationToken);

        if (!await enumerator.MoveNextAsync())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteNewline();
        } while (await enumerator.MoveNextAsync());
    }

    public static async Task Write<T0, T1, T2, T3>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IEnumerable<(T0, T1, T2, T3)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        using var enumerator = records.GetEnumerator();

        if (!enumerator.MoveNext())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteNewline();
        } while (enumerator.MoveNext());
    }

    public static async Task WriteAsync<T0, T1, T2, T3>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IAsyncEnumerable<(T0, T1, T2, T3)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        await using var enumerator = records.GetAsyncEnumerator(cancellationToken);

        if (!await enumerator.MoveNextAsync())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteNewline();
        } while (await enumerator.MoveNextAsync());
    }

    public static async Task Write<T0, T1, T2, T3, T4>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IEnumerable<(T0, T1, T2, T3, T4)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        using var enumerator = records.GetEnumerator();

        if (!enumerator.MoveNext())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteNewline();
        } while (enumerator.MoveNext());
    }

    public static async Task WriteAsync<T0, T1, T2, T3, T4>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IAsyncEnumerable<(T0, T1, T2, T3, T4)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        await using var enumerator = records.GetAsyncEnumerator(cancellationToken);

        if (!await enumerator.MoveNextAsync())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteNewline();
        } while (await enumerator.MoveNextAsync());
    }

    public static async Task Write<T0, T1, T2, T3, T4, T5>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IEnumerable<(T0, T1, T2, T3, T4, T5)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        using var enumerator = records.GetEnumerator();

        if (!enumerator.MoveNext())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteNewline();
        } while (enumerator.MoveNext());
    }

    public static async Task WriteAsync<T0, T1, T2, T3, T4, T5>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IAsyncEnumerable<(T0, T1, T2, T3, T4, T5)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        await using var enumerator = records.GetAsyncEnumerator(cancellationToken);

        if (!await enumerator.MoveNextAsync())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteNewline();
        } while (await enumerator.MoveNextAsync());
    }

    public static async Task Write<T0, T1, T2, T3, T4, T5, T6>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IEnumerable<(T0, T1, T2, T3, T4, T5, T6)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        using var enumerator = records.GetEnumerator();

        if (!enumerator.MoveNext())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();
        var formatter6 = options.GetFormatter<T6>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter6, record.Item7, cancellationToken);
            writer.WriteNewline();
        } while (enumerator.MoveNext());
    }

    public static async Task WriteAsync<T0, T1, T2, T3, T4, T5, T6>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IAsyncEnumerable<(T0, T1, T2, T3, T4, T5, T6)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        await using var enumerator = records.GetAsyncEnumerator(cancellationToken);

        if (!await enumerator.MoveNextAsync())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();
        var formatter6 = options.GetFormatter<T6>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter6, record.Item7, cancellationToken);
            writer.WriteNewline();
        } while (await enumerator.MoveNextAsync());
    }

    public static async Task Write<T0, T1, T2, T3, T4, T5, T6, T7>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IEnumerable<(T0, T1, T2, T3, T4, T5, T6, T7)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        using var enumerator = records.GetEnumerator();

        if (!enumerator.MoveNext())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();
        var formatter6 = options.GetFormatter<T6>();
        var formatter7 = options.GetFormatter<T7>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter6, record.Item7, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter7, record.Item8, cancellationToken);
            writer.WriteNewline();
        } while (enumerator.MoveNext());
    }

    public static async Task WriteAsync<T0, T1, T2, T3, T4, T5, T6, T7>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IAsyncEnumerable<(T0, T1, T2, T3, T4, T5, T6, T7)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        await using var enumerator = records.GetAsyncEnumerator(cancellationToken);

        if (!await enumerator.MoveNextAsync())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();
        var formatter6 = options.GetFormatter<T6>();
        var formatter7 = options.GetFormatter<T7>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter6, record.Item7, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter7, record.Item8, cancellationToken);
            writer.WriteNewline();
        } while (await enumerator.MoveNextAsync());
    }

    public static async Task Write<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IEnumerable<(T0, T1, T2, T3, T4, T5, T6, T7, T8)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        using var enumerator = records.GetEnumerator();

        if (!enumerator.MoveNext())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();
        var formatter6 = options.GetFormatter<T6>();
        var formatter7 = options.GetFormatter<T7>();
        var formatter8 = options.GetFormatter<T8>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter6, record.Item7, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter7, record.Item8, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter8, record.Item9, cancellationToken);
            writer.WriteNewline();
        } while (enumerator.MoveNext());
    }

    public static async Task WriteAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IAsyncEnumerable<(T0, T1, T2, T3, T4, T5, T6, T7, T8)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        await using var enumerator = records.GetAsyncEnumerator(cancellationToken);

        if (!await enumerator.MoveNextAsync())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();
        var formatter6 = options.GetFormatter<T6>();
        var formatter7 = options.GetFormatter<T7>();
        var formatter8 = options.GetFormatter<T8>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter6, record.Item7, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter7, record.Item8, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter8, record.Item9, cancellationToken);
            writer.WriteNewline();
        } while (await enumerator.MoveNextAsync());
    }

    public static async Task Write<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IEnumerable<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        using var enumerator = records.GetEnumerator();

        if (!enumerator.MoveNext())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();
        var formatter6 = options.GetFormatter<T6>();
        var formatter7 = options.GetFormatter<T7>();
        var formatter8 = options.GetFormatter<T8>();
        var formatter9 = options.GetFormatter<T9>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter6, record.Item7, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter7, record.Item8, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter8, record.Item9, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter9, record.Item10, cancellationToken);
            writer.WriteNewline();
        } while (enumerator.MoveNext());
    }

    public static async Task WriteAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IAsyncEnumerable<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        await using var enumerator = records.GetAsyncEnumerator(cancellationToken);

        if (!await enumerator.MoveNextAsync())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();
        var formatter6 = options.GetFormatter<T6>();
        var formatter7 = options.GetFormatter<T7>();
        var formatter8 = options.GetFormatter<T8>();
        var formatter9 = options.GetFormatter<T9>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter6, record.Item7, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter7, record.Item8, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter8, record.Item9, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter9, record.Item10, cancellationToken);
            writer.WriteNewline();
        } while (await enumerator.MoveNextAsync());
    }

    public static async Task Write<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IEnumerable<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        using var enumerator = records.GetEnumerator();

        if (!enumerator.MoveNext())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();
        var formatter6 = options.GetFormatter<T6>();
        var formatter7 = options.GetFormatter<T7>();
        var formatter8 = options.GetFormatter<T8>();
        var formatter9 = options.GetFormatter<T9>();
        var formatter10 = options.GetFormatter<T10>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter6, record.Item7, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter7, record.Item8, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter8, record.Item9, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter9, record.Item10, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter10, record.Item11, cancellationToken);
            writer.WriteNewline();
        } while (enumerator.MoveNext());
    }

    public static async Task WriteAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IAsyncEnumerable<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        await using var enumerator = records.GetAsyncEnumerator(cancellationToken);

        if (!await enumerator.MoveNextAsync())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();
        var formatter6 = options.GetFormatter<T6>();
        var formatter7 = options.GetFormatter<T7>();
        var formatter8 = options.GetFormatter<T8>();
        var formatter9 = options.GetFormatter<T9>();
        var formatter10 = options.GetFormatter<T10>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter6, record.Item7, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter7, record.Item8, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter8, record.Item9, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter9, record.Item10, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter10, record.Item11, cancellationToken);
            writer.WriteNewline();
        } while (await enumerator.MoveNextAsync());
    }

    public static async Task Write<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IEnumerable<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        using var enumerator = records.GetEnumerator();

        if (!enumerator.MoveNext())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();
        var formatter6 = options.GetFormatter<T6>();
        var formatter7 = options.GetFormatter<T7>();
        var formatter8 = options.GetFormatter<T8>();
        var formatter9 = options.GetFormatter<T9>();
        var formatter10 = options.GetFormatter<T10>();
        var formatter11 = options.GetFormatter<T11>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter6, record.Item7, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter7, record.Item8, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter8, record.Item9, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter9, record.Item10, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter10, record.Item11, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter11, record.Item12, cancellationToken);
            writer.WriteNewline();
        } while (enumerator.MoveNext());
    }

    public static async Task WriteAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IAsyncEnumerable<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        await using var enumerator = records.GetAsyncEnumerator(cancellationToken);

        if (!await enumerator.MoveNextAsync())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();
        var formatter6 = options.GetFormatter<T6>();
        var formatter7 = options.GetFormatter<T7>();
        var formatter8 = options.GetFormatter<T8>();
        var formatter9 = options.GetFormatter<T9>();
        var formatter10 = options.GetFormatter<T10>();
        var formatter11 = options.GetFormatter<T11>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter6, record.Item7, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter7, record.Item8, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter8, record.Item9, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter9, record.Item10, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter10, record.Item11, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter11, record.Item12, cancellationToken);
            writer.WriteNewline();
        } while (await enumerator.MoveNextAsync());
    }

    public static async Task Write<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IEnumerable<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        using var enumerator = records.GetEnumerator();

        if (!enumerator.MoveNext())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();
        var formatter6 = options.GetFormatter<T6>();
        var formatter7 = options.GetFormatter<T7>();
        var formatter8 = options.GetFormatter<T8>();
        var formatter9 = options.GetFormatter<T9>();
        var formatter10 = options.GetFormatter<T10>();
        var formatter11 = options.GetFormatter<T11>();
        var formatter12 = options.GetFormatter<T12>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter6, record.Item7, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter7, record.Item8, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter8, record.Item9, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter9, record.Item10, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter10, record.Item11, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter11, record.Item12, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter12, record.Item13, cancellationToken);
            writer.WriteNewline();
        } while (enumerator.MoveNext());
    }

    public static async Task WriteAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IAsyncEnumerable<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        await using var enumerator = records.GetAsyncEnumerator(cancellationToken);

        if (!await enumerator.MoveNextAsync())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();
        var formatter6 = options.GetFormatter<T6>();
        var formatter7 = options.GetFormatter<T7>();
        var formatter8 = options.GetFormatter<T8>();
        var formatter9 = options.GetFormatter<T9>();
        var formatter10 = options.GetFormatter<T10>();
        var formatter11 = options.GetFormatter<T11>();
        var formatter12 = options.GetFormatter<T12>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter6, record.Item7, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter7, record.Item8, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter8, record.Item9, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter9, record.Item10, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter10, record.Item11, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter11, record.Item12, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter12, record.Item13, cancellationToken);
            writer.WriteNewline();
        } while (await enumerator.MoveNextAsync());
    }

    public static async Task Write<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IEnumerable<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        using var enumerator = records.GetEnumerator();

        if (!enumerator.MoveNext())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();
        var formatter6 = options.GetFormatter<T6>();
        var formatter7 = options.GetFormatter<T7>();
        var formatter8 = options.GetFormatter<T8>();
        var formatter9 = options.GetFormatter<T9>();
        var formatter10 = options.GetFormatter<T10>();
        var formatter11 = options.GetFormatter<T11>();
        var formatter12 = options.GetFormatter<T12>();
        var formatter13 = options.GetFormatter<T13>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter6, record.Item7, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter7, record.Item8, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter8, record.Item9, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter9, record.Item10, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter10, record.Item11, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter11, record.Item12, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter12, record.Item13, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter13, record.Item14, cancellationToken);
            writer.WriteNewline();
        } while (enumerator.MoveNext());
    }

    public static async Task WriteAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IAsyncEnumerable<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        await using var enumerator = records.GetAsyncEnumerator(cancellationToken);

        if (!await enumerator.MoveNextAsync())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();
        var formatter6 = options.GetFormatter<T6>();
        var formatter7 = options.GetFormatter<T7>();
        var formatter8 = options.GetFormatter<T8>();
        var formatter9 = options.GetFormatter<T9>();
        var formatter10 = options.GetFormatter<T10>();
        var formatter11 = options.GetFormatter<T11>();
        var formatter12 = options.GetFormatter<T12>();
        var formatter13 = options.GetFormatter<T13>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter6, record.Item7, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter7, record.Item8, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter8, record.Item9, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter9, record.Item10, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter10, record.Item11, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter11, record.Item12, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter12, record.Item13, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter13, record.Item14, cancellationToken);
            writer.WriteNewline();
        } while (await enumerator.MoveNextAsync());
    }

    public static async Task Write<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IEnumerable<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        using var enumerator = records.GetEnumerator();

        if (!enumerator.MoveNext())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();
        var formatter6 = options.GetFormatter<T6>();
        var formatter7 = options.GetFormatter<T7>();
        var formatter8 = options.GetFormatter<T8>();
        var formatter9 = options.GetFormatter<T9>();
        var formatter10 = options.GetFormatter<T10>();
        var formatter11 = options.GetFormatter<T11>();
        var formatter12 = options.GetFormatter<T12>();
        var formatter13 = options.GetFormatter<T13>();
        var formatter14 = options.GetFormatter<T14>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter6, record.Item7, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter7, record.Item8, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter8, record.Item9, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter9, record.Item10, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter10, record.Item11, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter11, record.Item12, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter12, record.Item13, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter13, record.Item14, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter14, record.Item15, cancellationToken);
            writer.WriteNewline();
        } while (enumerator.MoveNext());
    }

    public static async Task WriteAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IAsyncEnumerable<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        await using var enumerator = records.GetAsyncEnumerator(cancellationToken);

        if (!await enumerator.MoveNextAsync())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();
        var formatter6 = options.GetFormatter<T6>();
        var formatter7 = options.GetFormatter<T7>();
        var formatter8 = options.GetFormatter<T8>();
        var formatter9 = options.GetFormatter<T9>();
        var formatter10 = options.GetFormatter<T10>();
        var formatter11 = options.GetFormatter<T11>();
        var formatter12 = options.GetFormatter<T12>();
        var formatter13 = options.GetFormatter<T13>();
        var formatter14 = options.GetFormatter<T14>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter6, record.Item7, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter7, record.Item8, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter8, record.Item9, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter9, record.Item10, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter10, record.Item11, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter11, record.Item12, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter12, record.Item13, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter13, record.Item14, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter14, record.Item15, cancellationToken);
            writer.WriteNewline();
        } while (await enumerator.MoveNextAsync());
    }

    public static async Task Write<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IEnumerable<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        using var enumerator = records.GetEnumerator();

        if (!enumerator.MoveNext())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();
        var formatter6 = options.GetFormatter<T6>();
        var formatter7 = options.GetFormatter<T7>();
        var formatter8 = options.GetFormatter<T8>();
        var formatter9 = options.GetFormatter<T9>();
        var formatter10 = options.GetFormatter<T10>();
        var formatter11 = options.GetFormatter<T11>();
        var formatter12 = options.GetFormatter<T12>();
        var formatter13 = options.GetFormatter<T13>();
        var formatter14 = options.GetFormatter<T14>();
        var formatter15 = options.GetFormatter<T15>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter6, record.Item7, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter7, record.Item8, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter8, record.Item9, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter9, record.Item10, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter10, record.Item11, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter11, record.Item12, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter12, record.Item13, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter13, record.Item14, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter14, record.Item15, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter15, record.Item16, cancellationToken);
            writer.WriteNewline();
        } while (enumerator.MoveNext());
    }

    public static async Task WriteAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(
        CsvWriteOperation<T, TWriter> writer,
        CsvWriterOptions<T> options,
        IAsyncEnumerable<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)> records,
        CancellationToken cancellationToken)
    {
        EnsureNoHeader(options);
        cancellationToken.ThrowIfCancellationRequested();

        await using var enumerator = records.GetAsyncEnumerator(cancellationToken);

        if (!await enumerator.MoveNextAsync())
			return;

        var formatter0 = options.GetFormatter<T0>();
        var formatter1 = options.GetFormatter<T1>();
        var formatter2 = options.GetFormatter<T2>();
        var formatter3 = options.GetFormatter<T3>();
        var formatter4 = options.GetFormatter<T4>();
        var formatter5 = options.GetFormatter<T5>();
        var formatter6 = options.GetFormatter<T6>();
        var formatter7 = options.GetFormatter<T7>();
        var formatter8 = options.GetFormatter<T8>();
        var formatter9 = options.GetFormatter<T9>();
        var formatter10 = options.GetFormatter<T10>();
        var formatter11 = options.GetFormatter<T11>();
        var formatter12 = options.GetFormatter<T12>();
        var formatter13 = options.GetFormatter<T13>();
        var formatter14 = options.GetFormatter<T14>();
        var formatter15 = options.GetFormatter<T15>();

        do
        {
            var record = enumerator.Current;
            await writer.WriteValueAsync(formatter0, record.Item1, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter1, record.Item2, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter2, record.Item3, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter3, record.Item4, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter4, record.Item5, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter5, record.Item6, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter6, record.Item7, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter7, record.Item8, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter8, record.Item9, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter9, record.Item10, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter10, record.Item11, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter11, record.Item12, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter12, record.Item13, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter13, record.Item14, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter14, record.Item15, cancellationToken);
            writer.WriteDelimiter();
            await writer.WriteValueAsync(formatter15, record.Item16, cancellationToken);
            writer.WriteNewline();
        } while (await enumerator.MoveNextAsync());
    }

}
<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#
    // Max supported generics
    const int TotalCount = 16;
    var indexes = Enumerable.Range(0, TotalCount);
    var genericTypes = indexes.Select(i => $"T{i}").ToArray();
    var parsers = indexes.Select(i => $"ICsvParser<T, T{i}> parser{i}").ToArray();
    var values = indexes.Select(i => $"v{i}").ToArray();
#>
// <auto-generated />
using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using CommunityToolkit.Diagnostics;
using FlameCsv.Binding;
using FlameCsv.Parsers;
using FlameCsv.Reading;

namespace FlameCsv.Runtime;

internal abstract partial class Materializer
{
    /// <summary>
    /// Returns the constructor info for materializer of <typeparamref name="TResult"/>.
    /// </summary>
    /// <param name="genericTypeParameters">Types of parsed columns in order</param>
    /// <typeparam name="T">CSV token type</typeparam>
    /// <typeparam name="TResult">Type of the object/struct being read</typeparam>
    [ExcludeFromCodeCoverage]
    internal static ConstructorInfo GetConstructor<T, TResult>(ReadOnlySpan<CsvBinding<TResult>> bindings)
        where T : unmanaged, IEquatable<T>
    {
        Type[] types = new Type[bindings.Length + 2];

        for (int i = 0; i < bindings.Length; i++)
        {
            types[i + 1] = bindings[i].Type;
        }

        types[0] = typeof(T);
        types[^1] = typeof(TResult);

        return (types.Length switch
        {
<#
    for (var i = 1; i <= TotalCount; i++)
    {
        Write("            ");
        Write((i + 2).ToString()); // T + generics# + TResult
        Write(" => typeof(Materializer<,,");

        for (var j = 1; j < i; j++)
        {
            Write(",");
        }

        WriteLine(">),");
    }
#>
            _ => ThrowHelper.ThrowArgumentException<Type>($"Unsupported typeparam count: {bindings.Length}"),
        }).MakeGenericType(types).GetConstructors()[0];
    }
}

<#
    for (var current = 1; current <= TotalCount; current++)
    {
        var generics = string.Join(", ", genericTypes.Take(current)) + ", TResult";
#>
/// <inheritdoc />
[ExcludeFromCodeCoverage]
internal sealed class Materializer<T, <#= generics #>>
    : Materializer, IMaterializer<T, TResult> where T : unmanaged, IEquatable<T>
{
    public override int ColumnCount => <#= current #>;

    protected override Type RecordType => typeof(TResult);

    private readonly Func<<#= generics #>> valueFactory;

    public Materializer(
        Func<<#= generics #>> valueFactory,
<#
        for (var i = 0; i < current; i++)
        {
            if (i != 0)
                WriteLine(",");
            Write("        ");
            Write(parsers[i]);
        }
#>)
    {
        this.valueFactory = valueFactory;
<#
        for (var i = 0; i < current; i++)
        {
            var ix = i.ToString();
            Write("        this.parser");
            Write(ix);
            Write(" = parser");
            Write(ix);
            WriteLine(";");
        }
#>    }

<#
        for (var i = 0; i < current; i++)
        {
            Write("    private readonly ");
            Write(parsers[i]);
            WriteLine(";");
        }
#>

    public TResult Parse(ref CsvColumnEnumerator<T> enumerator)
    {
<#
        for (var i = 0; i < current; i++)
        {
            Write("        ParseNext(ref enumerator, parser");
            Write(i.ToString());
            Write(", out ");
            Write(genericTypes[i]);
            Write(" ");
            Write(values[i]);
            WriteLine(");");
        }
#>

        enumerator.EnsureAllColumnsRead();

<#
        Write("        var result = valueFactory(");
        for (var i = 0; i < current; i++)
        {
            if (i != 0)
                Write(", ");
            Write(values[i]);
        }
        WriteLine(");");
#>

        return result;
    }
}

<#
    }
#>

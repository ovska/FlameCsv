<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#
    // Max supported generics
    const int TotalCount = 16;
    var genericTypes = Enumerable.Range(0, TotalCount).Select(i => $"T{i}").ToArray();
    var converters = Enumerable.Range(0, TotalCount).Select(i => $"CsvConverter<T, T{i}> converter{i}").ToArray();
    var values = Enumerable.Range(0, TotalCount).Select(i => $"v{i}").ToArray();
#>
// <auto-generated />
using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using FlameCsv.Binding;
using FlameCsv.Exceptions;
using FlameCsv.Reading;

namespace FlameCsv.Runtime;

[System.CodeDom.Compiler.GeneratedCode(Messages.T4Template, null)]
internal static class Materializer<T>
{
    /// <summary>
    /// Returns the constructor info for materializer of <typeparamref name="TResult"/>.
    /// </summary>
    /// <param name="bindings">Bindings of the collection used to create the materializer</param>
    /// <typeparam name="TResult">Type of the object/struct being read</typeparam>
    [ExcludeFromCodeCoverage]
    [RequiresUnreferencedCode("Trimmed Materializer<...> implementations may not be available during runtime.")]
    [RequiresDynamicCode("MakeGenericType is called on Materializer<...>")]
    internal static ConstructorInfo GetConstructor<TResult>(ReadOnlySpan<CsvBinding<TResult>> bindings)
    {
        Type[] types = new Type[bindings.Length + 2];

        for (int i = 0; i < bindings.Length; i++)
        {
            types[i + 1] = bindings[i].Type;
        }

        types[0] = typeof(T);
        types[^1] = typeof(TResult);

        return (types.Length switch
        {
<#
    for (var i = 1; i <= TotalCount; i++)
    {
        Write("            ");
        Write((i + 2).ToString()); // T + generics# + TResult
        Write(" => typeof(Materializer<,,");

        for (var j = 1; j < i; j++)
        {
            Write(",");
        }

        WriteLine(">),");
    }
#>
            > <#= TotalCount + 2#> => throw new NotSupportedException($"Type params up to {bindings.Length} are not supported (max: <#= TotalCount #>)"),
            _ => throw new ArgumentException($"Unsupported typeparam count: {bindings.Length}"),
        }).MakeGenericType(types).GetConstructors()[0];
    }
}

<#
    for (var current = 1; current <= TotalCount; current++)
    {
        var generics = string.Join(", ", genericTypes.Take(current)) + ", TResult";
#>
/// <inheritdoc />
[ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode(Messages.T4Template, null)]
[RDC(Messages.ConverterFactories), RUF(Messages.ConverterFactories)]
internal sealed class Materializer<T, <#= generics #>> : Materializer<T, TResult>, IMaterializer<T, TResult> where T : unmanaged, IBinaryInteger<T>
{
    private readonly Func<<#= generics #>> valueFactory;

    public Materializer(
        Func<<#= generics #>> valueFactory,
        CsvBindingCollection<TResult> bindingCollection,
        CsvOptions<T> options)
        : base(bindingCollection)
    {
        this.valueFactory = valueFactory;
        ReadOnlySpan<CsvBinding<TResult>> bindings = bindingCollection.Bindings;
<#
        for (var i = 0; i < current; i++)
        {
            var ix = i.ToString();
            Write("        this.converter");
            Write(ix);
            Write(" = ResolveConverter<");
            Write(genericTypes[i]);
            Write(">(bindings[");
            Write(ix);
            WriteLine("], options);");
        }
#>    }

<#
        for (var i = 0; i < current; i++)
        {
            Write("    private readonly ");
            Write(converters[i]);
            WriteLine(";");
        }
#>

    public TResult Parse<TRecord>(ref TRecord record) where TRecord : ICsvRecord<T>, allows ref struct
    {
        if (record.FieldCount != <#= current #>) CsvReadException.ThrowForInvalidFieldCount(<#= current #>, record.FieldCount);
<#
        for (var i = 0; i < current; i++)
        {
            Write($"        if (!converter");
            Write(i.ToString());
            Write(".TryParse(record[");
            Write(i.ToString());
            Write("], out ");
            Write(genericTypes[i]);
            Write(" ");
            Write(values[i]);
            Write(")) CsvParseException.Throw(record[");
            Write(i.ToString());
            Write("], converter");
            Write(i.ToString());
            Write(", GetName(");
            Write(i.ToString());
            WriteLine("));");
        }

        Write("        return valueFactory(");
        for (var i = 0; i < current; i++)
        {
            if (i != 0)
                Write(", ");
            Write(values[i]);
        }
        WriteLine(");");
#>
    }
}

<#
    }
#>

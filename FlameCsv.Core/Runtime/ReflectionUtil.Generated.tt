<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#
    const int TotalCount = 16;
    var genericTypes = Enumerable.Range(1, TotalCount).Select(i => $"TValue{i}").ToArray();
#>
// <auto-generated />
using System.Linq.Expressions;
using System.Reflection;
using CommunityToolkit.Diagnostics;
using FastExpressionCompiler;

namespace FlameCsv.Runtime;

internal static partial class ReflectionUtil
{
    internal static readonly Dictionary<int, MethodInfo> InitializerFactories =
        Enumerable.Range(1, <#= TotalCount #>).ToDictionary(
            static count => count,
            static count =>
            {
                Delegate initializer = count switch
                {
<#
    for (var i = 1; i <= TotalCount; i++)
    {
        Write("                    ");
        Write(i.ToString());
        Write(" => (CreateInitializer<object");
        for (var j = 0; j < i; j++)
        {
            Write(", object");
        }
        WriteLine(">),");
    }
#>
                    _ => ThrowHelper.ThrowArgumentOutOfRangeException<Delegate>(nameof(count), count, null),
                };

                return initializer.Method.GetGenericMethodDefinition();
            });

<#
    for (var current = 1; current <= TotalCount; current++)
    {
        var generics = string.Join(", ", genericTypes.Take(current)) + ", T";
#>
    public static Func<<#= generics #>> CreateInitializer<<#= generics #>>(
<#
        for (var index = 1; index <= current; index++)
        {
            Write($"        MemberInfo member{index}");

            if (index != current)
                WriteLine(",");
        }
#>)
    {
<#
        for (var index = 1; index <= current; index++)
        {
            var paramName = "value" + index;
            WriteLine(
                $"        var {paramName} = Expression.Parameter(typeof({genericTypes[index - 1]}), \"{paramName}\");");
        }
#>
        var init = Expression.MemberInit(
            Expression.New(typeof(T)),
<#
        for (var i = 1; i <= current; i++)
        {
            Write($"            Expression.Bind(member{i}, value{i})");

            if (i != current)
                WriteLine(",");
        }
#>);
        var lambda = Expression.Lambda(init, <#
        for (var i = 1; i <= current; i++)
        {
            Write($"value{i}");
            if (i != current)
                Write(", ");
        }
#>);
        return lambda.TryCompileWithoutClosure<Func<<#= generics #>>>(flags: DefaultCompilerFlags)
            ?? lambda.CompileFast<Func<<#= generics #>>>(flags: DefaultCompilerFlags);
    }

<#
    } #>
}

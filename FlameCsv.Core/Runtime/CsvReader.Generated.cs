// <auto-generated />
#nullable enable
using System.Diagnostics.CodeAnalysis;
using System.IO.Pipelines;
using FlameCsv.Enumeration;
using FlameCsv.Reading;
using FlameCsv.Runtime;

namespace FlameCsv;

public static partial class CsvReader
{
    public sealed class CsvRecordFactoryAsyncEnumerable<T, TValue> : IAsyncEnumerable<TValue>
        where T : unmanaged, IEquatable<T>
    {
        private readonly CsvReadingContext<T> _context;
        private readonly ICsvPipeReader<T> _reader;
        private readonly IMaterializer<T, TValue> _materializer;

        internal CsvRecordFactoryAsyncEnumerable(in CsvReadingContext<T> context, ICsvPipeReader<T> reader, IMaterializer<T, TValue> materializer)
        {
            _context = context;
            _reader = reader;
            _materializer = materializer;
        }

        public CsvValueAsyncEnumerator<T, TValue> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new CsvValueAsyncEnumerator<T, TValue>(
                in _context,
                _materializer,
                _reader,
                cancellationToken);
        }

        IAsyncEnumerator<TValue> IAsyncEnumerable<TValue>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }
    }

    [System.Diagnostics.StackTraceHidden]
    private static CsvReadingContext<T> ValidateReadRecordsArgs<T>(
        [NotNull] object? reader,
        [NotNull] CsvReaderOptions<T>? options,
        [NotNull] object? recordFactory,
        in CsvContextOverride<T> contextOverride)
        where T : unmanaged, IEquatable<T>
    {
        ArgumentNullException.ThrowIfNull(reader);
        ArgumentNullException.ThrowIfNull(options);
        ArgumentNullException.ThrowIfNull(recordFactory);

        CsvReadingContext<T> context = new(options, in contextOverride);

        if (context.HasHeader)
            ThrowArgumentExceptionReadRecordsHasHeader();

        return context;

        static void ThrowArgumentExceptionReadRecordsHasHeader()
        {
            throw new ArgumentException(
                "The options were configured to read a CSV with a header record, " +
                "which is not supported by ReadRecordsAsync.");
        }
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 1 field.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<char, TValue> ReadRecordsAsync<T0, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, TValue> recordFactory,
        CsvContextOverride<char> context = default)
    {
        CsvReadingContext<char> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<char, T0, TValue> materializer = new(recordFactory, options.GetParser<T0>());

        return new CsvRecordFactoryAsyncEnumerable<char, TValue>(
            in readerContext,
            new TextPipeReader(reader, DefaultBufferSize, readerContext.ArrayPool),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 2 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<char, TValue> ReadRecordsAsync<T0, T1, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, TValue> recordFactory,
        CsvContextOverride<char> context = default)
    {
        CsvReadingContext<char> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<char, T0, T1, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>());

        return new CsvRecordFactoryAsyncEnumerable<char, TValue>(
            in readerContext,
            new TextPipeReader(reader, DefaultBufferSize, readerContext.ArrayPool),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 3 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<char, TValue> ReadRecordsAsync<T0, T1, T2, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, TValue> recordFactory,
        CsvContextOverride<char> context = default)
    {
        CsvReadingContext<char> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<char, T0, T1, T2, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>());

        return new CsvRecordFactoryAsyncEnumerable<char, TValue>(
            in readerContext,
            new TextPipeReader(reader, DefaultBufferSize, readerContext.ArrayPool),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 4 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<char, TValue> ReadRecordsAsync<T0, T1, T2, T3, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, TValue> recordFactory,
        CsvContextOverride<char> context = default)
    {
        CsvReadingContext<char> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<char, T0, T1, T2, T3, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>());

        return new CsvRecordFactoryAsyncEnumerable<char, TValue>(
            in readerContext,
            new TextPipeReader(reader, DefaultBufferSize, readerContext.ArrayPool),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 5 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<char, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, TValue> recordFactory,
        CsvContextOverride<char> context = default)
    {
        CsvReadingContext<char> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<char, T0, T1, T2, T3, T4, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>());

        return new CsvRecordFactoryAsyncEnumerable<char, TValue>(
            in readerContext,
            new TextPipeReader(reader, DefaultBufferSize, readerContext.ArrayPool),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 6 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<char, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, TValue> recordFactory,
        CsvContextOverride<char> context = default)
    {
        CsvReadingContext<char> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<char, T0, T1, T2, T3, T4, T5, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>());

        return new CsvRecordFactoryAsyncEnumerable<char, TValue>(
            in readerContext,
            new TextPipeReader(reader, DefaultBufferSize, readerContext.ArrayPool),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 7 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<char, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, T6, TValue> recordFactory,
        CsvContextOverride<char> context = default)
    {
        CsvReadingContext<char> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<char, T0, T1, T2, T3, T4, T5, T6, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>());

        return new CsvRecordFactoryAsyncEnumerable<char, TValue>(
            in readerContext,
            new TextPipeReader(reader, DefaultBufferSize, readerContext.ArrayPool),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 8 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<char, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, TValue> recordFactory,
        CsvContextOverride<char> context = default)
    {
        CsvReadingContext<char> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<char, T0, T1, T2, T3, T4, T5, T6, T7, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>());

        return new CsvRecordFactoryAsyncEnumerable<char, TValue>(
            in readerContext,
            new TextPipeReader(reader, DefaultBufferSize, readerContext.ArrayPool),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 9 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<char, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, TValue> recordFactory,
        CsvContextOverride<char> context = default)
    {
        CsvReadingContext<char> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<char, T0, T1, T2, T3, T4, T5, T6, T7, T8, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>());

        return new CsvRecordFactoryAsyncEnumerable<char, TValue>(
            in readerContext,
            new TextPipeReader(reader, DefaultBufferSize, readerContext.ArrayPool),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 10 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<char, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TValue> recordFactory,
        CsvContextOverride<char> context = default)
    {
        CsvReadingContext<char> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<char, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>());

        return new CsvRecordFactoryAsyncEnumerable<char, TValue>(
            in readerContext,
            new TextPipeReader(reader, DefaultBufferSize, readerContext.ArrayPool),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 11 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<char, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TValue> recordFactory,
        CsvContextOverride<char> context = default)
    {
        CsvReadingContext<char> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<char, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>());

        return new CsvRecordFactoryAsyncEnumerable<char, TValue>(
            in readerContext,
            new TextPipeReader(reader, DefaultBufferSize, readerContext.ArrayPool),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 12 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<char, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TValue> recordFactory,
        CsvContextOverride<char> context = default)
    {
        CsvReadingContext<char> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<char, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>(), options.GetParser<T11>());

        return new CsvRecordFactoryAsyncEnumerable<char, TValue>(
            in readerContext,
            new TextPipeReader(reader, DefaultBufferSize, readerContext.ArrayPool),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 13 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<char, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TValue> recordFactory,
        CsvContextOverride<char> context = default)
    {
        CsvReadingContext<char> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<char, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>(), options.GetParser<T11>(), options.GetParser<T12>());

        return new CsvRecordFactoryAsyncEnumerable<char, TValue>(
            in readerContext,
            new TextPipeReader(reader, DefaultBufferSize, readerContext.ArrayPool),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 14 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<char, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TValue> recordFactory,
        CsvContextOverride<char> context = default)
    {
        CsvReadingContext<char> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<char, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>(), options.GetParser<T11>(), options.GetParser<T12>(), options.GetParser<T13>());

        return new CsvRecordFactoryAsyncEnumerable<char, TValue>(
            in readerContext,
            new TextPipeReader(reader, DefaultBufferSize, readerContext.ArrayPool),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 15 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<char, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TValue> recordFactory,
        CsvContextOverride<char> context = default)
    {
        CsvReadingContext<char> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<char, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>(), options.GetParser<T11>(), options.GetParser<T12>(), options.GetParser<T13>(), options.GetParser<T14>());

        return new CsvRecordFactoryAsyncEnumerable<char, TValue>(
            in readerContext,
            new TextPipeReader(reader, DefaultBufferSize, readerContext.ArrayPool),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 16 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<char, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TValue> recordFactory,
        CsvContextOverride<char> context = default)
    {
        CsvReadingContext<char> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<char, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>(), options.GetParser<T11>(), options.GetParser<T12>(), options.GetParser<T13>(), options.GetParser<T14>(), options.GetParser<T15>());

        return new CsvRecordFactoryAsyncEnumerable<char, TValue>(
            in readerContext,
            new TextPipeReader(reader, DefaultBufferSize, readerContext.ArrayPool),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 1 field.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<byte, TValue> ReadRecordsAsync<T0, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, TValue> recordFactory,
        CsvContextOverride<byte> context = default)
    {
        CsvReadingContext<byte> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<byte, T0, TValue> materializer = new(recordFactory, options.GetParser<T0>());

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue>(
            in readerContext,
            new PipeReaderWrapper(reader),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 2 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<byte, TValue> ReadRecordsAsync<T0, T1, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, TValue> recordFactory,
        CsvContextOverride<byte> context = default)
    {
        CsvReadingContext<byte> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<byte, T0, T1, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>());

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue>(
            in readerContext,
            new PipeReaderWrapper(reader),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 3 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<byte, TValue> ReadRecordsAsync<T0, T1, T2, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, TValue> recordFactory,
        CsvContextOverride<byte> context = default)
    {
        CsvReadingContext<byte> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<byte, T0, T1, T2, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>());

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue>(
            in readerContext,
            new PipeReaderWrapper(reader),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 4 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<byte, TValue> ReadRecordsAsync<T0, T1, T2, T3, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, TValue> recordFactory,
        CsvContextOverride<byte> context = default)
    {
        CsvReadingContext<byte> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<byte, T0, T1, T2, T3, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>());

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue>(
            in readerContext,
            new PipeReaderWrapper(reader),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 5 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<byte, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, TValue> recordFactory,
        CsvContextOverride<byte> context = default)
    {
        CsvReadingContext<byte> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<byte, T0, T1, T2, T3, T4, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>());

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue>(
            in readerContext,
            new PipeReaderWrapper(reader),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 6 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<byte, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, TValue> recordFactory,
        CsvContextOverride<byte> context = default)
    {
        CsvReadingContext<byte> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<byte, T0, T1, T2, T3, T4, T5, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>());

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue>(
            in readerContext,
            new PipeReaderWrapper(reader),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 7 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<byte, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, T6, TValue> recordFactory,
        CsvContextOverride<byte> context = default)
    {
        CsvReadingContext<byte> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<byte, T0, T1, T2, T3, T4, T5, T6, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>());

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue>(
            in readerContext,
            new PipeReaderWrapper(reader),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 8 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<byte, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, TValue> recordFactory,
        CsvContextOverride<byte> context = default)
    {
        CsvReadingContext<byte> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<byte, T0, T1, T2, T3, T4, T5, T6, T7, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>());

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue>(
            in readerContext,
            new PipeReaderWrapper(reader),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 9 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<byte, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, TValue> recordFactory,
        CsvContextOverride<byte> context = default)
    {
        CsvReadingContext<byte> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<byte, T0, T1, T2, T3, T4, T5, T6, T7, T8, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>());

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue>(
            in readerContext,
            new PipeReaderWrapper(reader),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 10 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<byte, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TValue> recordFactory,
        CsvContextOverride<byte> context = default)
    {
        CsvReadingContext<byte> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<byte, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>());

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue>(
            in readerContext,
            new PipeReaderWrapper(reader),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 11 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<byte, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TValue> recordFactory,
        CsvContextOverride<byte> context = default)
    {
        CsvReadingContext<byte> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<byte, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>());

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue>(
            in readerContext,
            new PipeReaderWrapper(reader),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 12 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<byte, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TValue> recordFactory,
        CsvContextOverride<byte> context = default)
    {
        CsvReadingContext<byte> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<byte, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>(), options.GetParser<T11>());

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue>(
            in readerContext,
            new PipeReaderWrapper(reader),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 13 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<byte, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TValue> recordFactory,
        CsvContextOverride<byte> context = default)
    {
        CsvReadingContext<byte> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<byte, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>(), options.GetParser<T11>(), options.GetParser<T12>());

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue>(
            in readerContext,
            new PipeReaderWrapper(reader),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 14 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<byte, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TValue> recordFactory,
        CsvContextOverride<byte> context = default)
    {
        CsvReadingContext<byte> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<byte, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>(), options.GetParser<T11>(), options.GetParser<T12>(), options.GetParser<T13>());

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue>(
            in readerContext,
            new PipeReaderWrapper(reader),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 15 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<byte, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TValue> recordFactory,
        CsvContextOverride<byte> context = default)
    {
        CsvReadingContext<byte> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<byte, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>(), options.GetParser<T11>(), options.GetParser<T12>(), options.GetParser<T13>(), options.GetParser<T14>());

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue>(
            in readerContext,
            new PipeReaderWrapper(reader),
            materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed field values</param>
    /// <remarks>
    /// The CSV records must have 16 fields.<br/>Possible binding attributes placed
    /// on the parameter factory are ignored, and parameter position is always used to determine the field index.
    /// </remarks>
    public static CsvRecordFactoryAsyncEnumerable<byte, TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TValue> recordFactory,
        CsvContextOverride<byte> context = default)
    {
        CsvReadingContext<byte> readerContext = ValidateReadRecordsArgs(reader, options,  recordFactory, context);

        Materializer<byte, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>(), options.GetParser<T11>(), options.GetParser<T12>(), options.GetParser<T13>(), options.GetParser<T14>(), options.GetParser<T15>());

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue>(
            in readerContext,
            new PipeReaderWrapper(reader),
            materializer);
    }

}

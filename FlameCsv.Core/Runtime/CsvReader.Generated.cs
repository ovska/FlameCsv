#if false
// <auto-generated />
using System.IO.Pipelines;
using FlameCsv.Reading;
using FlameCsv.Runtime;

namespace FlameCsv;

public static partial class CsvReader
{
    internal sealed class CsvRecordFactoryAsyncEnumerable<T, TValue, TReader> : IAsyncEnumerable<TValue>
        where T : unmanaged, IEquatable<T>
        where TReader : struct, ICsvPipeReader<T>
    {
        private readonly CsvReaderOptions<T> _options;
        private readonly TReader _reader;
        private readonly IMaterializer<T, TValue> _materializer;

        public CsvRecordFactoryAsyncEnumerable(CsvReaderOptions<T> options, TReader reader, IMaterializer<T, TValue> materializer)
        {
            _options = options;
            _reader = reader;
            _materializer = materializer;
        }

        public IAsyncEnumerator<TValue> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            CommunityToolkit.Diagnostics.Guard.IsFalse(_options.HasHeader);
            return new AsyncCsvRecordEnumerator<T, TValue, TReader, CsvProcessor<T, TValue>>(
                _reader,
                new CsvProcessor<T, TValue>(_options, _materializer),
                cancellationToken);
        }
    }

    [System.Diagnostics.StackTraceHidden]
    private static void ValidateReadRecordsArgs(object reader, object options, object recordFactory, bool? hasHeader)
    {
        ArgumentNullException.ThrowIfNull(reader);
        ArgumentNullException.ThrowIfNull(options);
        ArgumentNullException.ThrowIfNull(recordFactory);
        if (hasHeader.GetValueOrDefault()) ThrowArgumentExceptionReadRecordsHasHeader();

        static void ThrowArgumentExceptionReadRecordsHasHeader()
        {
            throw new ArgumentException(
                "The options were configured to read a CSV with a header record, " +
                "which is not supported by ReadRecordsAsync.");
        }
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 1 column.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<char, T0, TValue> materializer = new(recordFactory, options.GetParser<T0>());
        CsvProcessor<char, TValue> processor = new(options, materializer);

        var pipeReader = new TextPipeReaderWrapper(new TextPipeReader(reader, options.ArrayPool));

        return new CsvRecordFactoryAsyncEnumerable<char, TValue, TextPipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 2 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<char, T0, T1, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>());
        CsvProcessor<char, TValue> processor = new(options, materializer);

        var pipeReader = new TextPipeReaderWrapper(new TextPipeReader(reader, options.ArrayPool));

        return new CsvRecordFactoryAsyncEnumerable<char, TValue, TextPipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 3 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<char, T0, T1, T2, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>());
        CsvProcessor<char, TValue> processor = new(options, materializer);

        var pipeReader = new TextPipeReaderWrapper(new TextPipeReader(reader, options.ArrayPool));

        return new CsvRecordFactoryAsyncEnumerable<char, TValue, TextPipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 4 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<char, T0, T1, T2, T3, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>());
        CsvProcessor<char, TValue> processor = new(options, materializer);

        var pipeReader = new TextPipeReaderWrapper(new TextPipeReader(reader, options.ArrayPool));

        return new CsvRecordFactoryAsyncEnumerable<char, TValue, TextPipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 5 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<char, T0, T1, T2, T3, T4, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>());
        CsvProcessor<char, TValue> processor = new(options, materializer);

        var pipeReader = new TextPipeReaderWrapper(new TextPipeReader(reader, options.ArrayPool));

        return new CsvRecordFactoryAsyncEnumerable<char, TValue, TextPipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 6 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<char, T0, T1, T2, T3, T4, T5, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>());
        CsvProcessor<char, TValue> processor = new(options, materializer);

        var pipeReader = new TextPipeReaderWrapper(new TextPipeReader(reader, options.ArrayPool));

        return new CsvRecordFactoryAsyncEnumerable<char, TValue, TextPipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 7 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, T6, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<char, T0, T1, T2, T3, T4, T5, T6, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>());
        CsvProcessor<char, TValue> processor = new(options, materializer);

        var pipeReader = new TextPipeReaderWrapper(new TextPipeReader(reader, options.ArrayPool));

        return new CsvRecordFactoryAsyncEnumerable<char, TValue, TextPipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 8 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<char, T0, T1, T2, T3, T4, T5, T6, T7, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>());
        CsvProcessor<char, TValue> processor = new(options, materializer);

        var pipeReader = new TextPipeReaderWrapper(new TextPipeReader(reader, options.ArrayPool));

        return new CsvRecordFactoryAsyncEnumerable<char, TValue, TextPipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 9 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<char, T0, T1, T2, T3, T4, T5, T6, T7, T8, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>());
        CsvProcessor<char, TValue> processor = new(options, materializer);

        var pipeReader = new TextPipeReaderWrapper(new TextPipeReader(reader, options.ArrayPool));

        return new CsvRecordFactoryAsyncEnumerable<char, TValue, TextPipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 10 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<char, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>());
        CsvProcessor<char, TValue> processor = new(options, materializer);

        var pipeReader = new TextPipeReaderWrapper(new TextPipeReader(reader, options.ArrayPool));

        return new CsvRecordFactoryAsyncEnumerable<char, TValue, TextPipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 11 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<char, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>());
        CsvProcessor<char, TValue> processor = new(options, materializer);

        var pipeReader = new TextPipeReaderWrapper(new TextPipeReader(reader, options.ArrayPool));

        return new CsvRecordFactoryAsyncEnumerable<char, TValue, TextPipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 12 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<char, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>(), options.GetParser<T11>());
        CsvProcessor<char, TValue> processor = new(options, materializer);

        var pipeReader = new TextPipeReaderWrapper(new TextPipeReader(reader, options.ArrayPool));

        return new CsvRecordFactoryAsyncEnumerable<char, TValue, TextPipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 13 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<char, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>(), options.GetParser<T11>(), options.GetParser<T12>());
        CsvProcessor<char, TValue> processor = new(options, materializer);

        var pipeReader = new TextPipeReaderWrapper(new TextPipeReader(reader, options.ArrayPool));

        return new CsvRecordFactoryAsyncEnumerable<char, TValue, TextPipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 14 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<char, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>(), options.GetParser<T11>(), options.GetParser<T12>(), options.GetParser<T13>());
        CsvProcessor<char, TValue> processor = new(options, materializer);

        var pipeReader = new TextPipeReaderWrapper(new TextPipeReader(reader, options.ArrayPool));

        return new CsvRecordFactoryAsyncEnumerable<char, TValue, TextPipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 15 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<char, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>(), options.GetParser<T11>(), options.GetParser<T12>(), options.GetParser<T13>(), options.GetParser<T14>());
        CsvProcessor<char, TValue> processor = new(options, materializer);

        var pipeReader = new TextPipeReaderWrapper(new TextPipeReader(reader, options.ArrayPool));

        return new CsvRecordFactoryAsyncEnumerable<char, TValue, TextPipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 16 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TValue>(
        TextReader reader,
        CsvReaderOptions<char> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<char, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>(), options.GetParser<T11>(), options.GetParser<T12>(), options.GetParser<T13>(), options.GetParser<T14>(), options.GetParser<T15>());
        CsvProcessor<char, TValue> processor = new(options, materializer);

        var pipeReader = new TextPipeReaderWrapper(new TextPipeReader(reader, options.ArrayPool));

        return new CsvRecordFactoryAsyncEnumerable<char, TValue, TextPipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 1 column.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<byte, T0, TValue> materializer = new(recordFactory, options.GetParser<T0>());
        CsvProcessor<byte, TValue> processor = new(options, materializer);

        var pipeReader = new PipeReaderWrapper(reader);

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue, PipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 2 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<byte, T0, T1, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>());
        CsvProcessor<byte, TValue> processor = new(options, materializer);

        var pipeReader = new PipeReaderWrapper(reader);

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue, PipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 3 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<byte, T0, T1, T2, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>());
        CsvProcessor<byte, TValue> processor = new(options, materializer);

        var pipeReader = new PipeReaderWrapper(reader);

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue, PipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 4 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<byte, T0, T1, T2, T3, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>());
        CsvProcessor<byte, TValue> processor = new(options, materializer);

        var pipeReader = new PipeReaderWrapper(reader);

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue, PipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 5 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<byte, T0, T1, T2, T3, T4, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>());
        CsvProcessor<byte, TValue> processor = new(options, materializer);

        var pipeReader = new PipeReaderWrapper(reader);

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue, PipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 6 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<byte, T0, T1, T2, T3, T4, T5, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>());
        CsvProcessor<byte, TValue> processor = new(options, materializer);

        var pipeReader = new PipeReaderWrapper(reader);

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue, PipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 7 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, T6, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<byte, T0, T1, T2, T3, T4, T5, T6, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>());
        CsvProcessor<byte, TValue> processor = new(options, materializer);

        var pipeReader = new PipeReaderWrapper(reader);

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue, PipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 8 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<byte, T0, T1, T2, T3, T4, T5, T6, T7, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>());
        CsvProcessor<byte, TValue> processor = new(options, materializer);

        var pipeReader = new PipeReaderWrapper(reader);

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue, PipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 9 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<byte, T0, T1, T2, T3, T4, T5, T6, T7, T8, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>());
        CsvProcessor<byte, TValue> processor = new(options, materializer);

        var pipeReader = new PipeReaderWrapper(reader);

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue, PipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 10 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<byte, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>());
        CsvProcessor<byte, TValue> processor = new(options, materializer);

        var pipeReader = new PipeReaderWrapper(reader);

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue, PipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 11 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<byte, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>());
        CsvProcessor<byte, TValue> processor = new(options, materializer);

        var pipeReader = new PipeReaderWrapper(reader);

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue, PipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 12 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<byte, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>(), options.GetParser<T11>());
        CsvProcessor<byte, TValue> processor = new(options, materializer);

        var pipeReader = new PipeReaderWrapper(reader);

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue, PipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 13 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<byte, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>(), options.GetParser<T11>(), options.GetParser<T12>());
        CsvProcessor<byte, TValue> processor = new(options, materializer);

        var pipeReader = new PipeReaderWrapper(reader);

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue, PipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 14 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<byte, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>(), options.GetParser<T11>(), options.GetParser<T12>(), options.GetParser<T13>());
        CsvProcessor<byte, TValue> processor = new(options, materializer);

        var pipeReader = new PipeReaderWrapper(reader);

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue, PipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 15 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<byte, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>(), options.GetParser<T11>(), options.GetParser<T12>(), options.GetParser<T13>(), options.GetParser<T14>());
        CsvProcessor<byte, TValue> processor = new(options, materializer);

        var pipeReader = new PipeReaderWrapper(reader);

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue, PipeReaderWrapper>(options, pipeReader, materializer);
    }

    /// <summary>Asynchronously reads <typeparamref name="TValue"/> from the reader.</summary>
    /// <param name="reader">Reader to read the CSV records from</param>
    /// <param name="options">Options instance containing tokens and parsers</param>
    /// <param name="recordFactory">Function to create the record from parsed column values</param>
    /// <remarks>
    /// The CSV records must have 16 columns.<br/>Possible binding attributes placed
    /// on the method are ignored, and parameter position is used to determine the field index.
    /// </remarks>
    public static IAsyncEnumerable<TValue> ReadRecordsAsync<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TValue>(
        PipeReader reader,
        CsvReaderOptions<byte> options,
        Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TValue> recordFactory)
    {
        ValidateReadRecordsArgs(reader, options, recordFactory, options?.HasHeader);

        Materializer<byte, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TValue> materializer = new(recordFactory, options.GetParser<T0>(), options.GetParser<T1>(), options.GetParser<T2>(), options.GetParser<T3>(), options.GetParser<T4>(), options.GetParser<T5>(), options.GetParser<T6>(), options.GetParser<T7>(), options.GetParser<T8>(), options.GetParser<T9>(), options.GetParser<T10>(), options.GetParser<T11>(), options.GetParser<T12>(), options.GetParser<T13>(), options.GetParser<T14>(), options.GetParser<T15>());
        CsvProcessor<byte, TValue> processor = new(options, materializer);

        var pipeReader = new PipeReaderWrapper(reader);

        return new CsvRecordFactoryAsyncEnumerable<byte, TValue, PipeReaderWrapper>(options, pipeReader, materializer);
    }

}
#endif
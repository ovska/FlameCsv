<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    (string typeName, string keyWord, bool isInteger)[] types =
    {
        ("Byte", "byte", true),
        ("SByte", "sbyte", true),
        ("Int16", "short", true),
        ("UInt16", "ushort", true),
        ("Int32", "int", true),
        ("UInt32", "uint", true),
        ("Int64", "long", true),
        ("UInt64", "ulong", true),
        ("IntPtr", "nint", true),
        ("UIntPtr", "nuint", true),
        ("Float", "float", false),
        ("Double", "double", false),
        ("Decimal", "decimal", false),
        ("Half", "Half", false),
    };
#>
// <auto-generated />
#nullable enable

namespace FlameCsv.Converters;

static partial class DefaultConverters
{
    private static void RegisterNumberConverters(List<KeyValuePair<Type, ConverterFactory<char>>> list)
    {
        list.EnsureCapacity(list.Count + <#= types.Length #>);
<# foreach (var (typeName, keyWord, isInteger) in types) { #>
        list.Add(new(typeof(<#= keyWord #>), static o => new <#= isInteger ? "Integer" : "Float" #>NumberTextConverter<<#= keyWord #>>(o)));
<# } #>
    }

    private static void RegisterNumberConverters(List<KeyValuePair<Type, ConverterFactory<byte>>> list)
    {
        list.EnsureCapacity(list.Count + <#= types.Length #>);
<# foreach (var (typeName, keyWord, isInteger) in types) { #>
        list.Add(new(typeof(<#= keyWord #>), static o => new <#= isInteger ? "Integer" : "Float" #>NumberUtf8Converter<<#= keyWord #>>(o)));
<# } #>
    }
}

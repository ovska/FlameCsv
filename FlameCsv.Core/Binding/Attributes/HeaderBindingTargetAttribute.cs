using System.Collections.Immutable;
using System.Reflection;
using CommunityToolkit.Diagnostics;

namespace FlameCsv.Binding.Attributes;

/// <summary>
/// Binds <see cref="MemberName"/> to columns whose header matches with the provided values.
/// Can be used when <see cref="HeaderBindingAttribute"/> cannot be used, e.g. on autogenerated partial classes.
/// </summary>
[AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]
public sealed class HeaderBindingTargetAttribute : Attribute
{
    /// <summary>Header values to match.</summary>
    public ImmutableArray<string> Values { get; }

    /// <summary>Name of the property or field.</summary>
    public string MemberName { get; }

    /// <inheritdoc cref="HeaderBindingAttribute.Order"/>
    public int Order { get; set; } = 1;

    /// <inheritdoc cref="HeaderBindingTargetAttribute"/>
    /// <param name="memberName">Name of the property or field</param>
    /// <param name="value">Header column value</param>
    public HeaderBindingTargetAttribute(
        string memberName,
        string value)
    {
        Guard.IsNotNullOrWhiteSpace(memberName);
        Values = ImmutableArray.Create(value);
        MemberName = memberName;
    }

    /// <inheritdoc cref="HeaderBindingTargetAttribute"/>
    /// <param name="memberName">Name of the property or field</param>
    /// <param name="values">Header column value</param>
    public HeaderBindingTargetAttribute(
        string memberName,
        params string[] values)
    {
        Guard.IsNotNullOrWhiteSpace(memberName);
        Guard.IsNotNull(values);
        Values = values.ToImmutableArray();
        MemberName = memberName;
    }

    internal IEnumerable<(string Value, MemberInfo Member, int Order)> GetMembers(Type targetType)
    {
        var member = targetType.GetProperty(MemberName, CsvBindingConstants.MemberLookupFlags)
            ?? (MemberInfo?)targetType.GetField(MemberName, CsvBindingConstants.MemberLookupFlags)
            ?? throw new InvalidOperationException(
                $"Invalid {nameof(HeaderBindingTargetAttribute)} definition on type {targetType.Name}: "
                + $"Property/field '{MemberName}' not found");

        return Values.Select(value => (value, member, Order));
    }
}
